// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/06/2024 14:43:37"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Q1
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Q1_vlg_sample_tst(
	clock,
	instr0,
	instr1,
	instr2,
	instr3,
	operand1,
	opernad0,
	sampler_tx
);
input  clock;
input [2:0] instr0;
input [2:0] instr1;
input [2:0] instr2;
input [2:0] instr3;
input [2:0] operand1;
input [2:0] opernad0;
output sampler_tx;

reg sample;
time current_time;
always @(clock or instr0 or instr1 or instr2 or instr3 or operand1 or opernad0)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Q1_vlg_check_tst (
	R0_value,
	R1_value,
	R2_value,
	R3_value,
	result_pin,
	sampler_rx
);
input [7:0] R0_value;
input [7:0] R1_value;
input [7:0] R2_value;
input [7:0] R3_value;
input [7:0] result_pin;
input sampler_rx;

reg [7:0] R0_value_expected;
reg [7:0] R1_value_expected;
reg [7:0] R2_value_expected;
reg [7:0] R3_value_expected;
reg [7:0] result_pin_expected;

reg [7:0] R0_value_prev;
reg [7:0] R1_value_prev;
reg [7:0] R2_value_prev;
reg [7:0] R3_value_prev;
reg [7:0] result_pin_prev;

reg [7:0] R0_value_expected_prev;
reg [7:0] R1_value_expected_prev;
reg [7:0] R2_value_expected_prev;
reg [7:0] R3_value_expected_prev;
reg [7:0] result_pin_expected_prev;

reg [7:0] last_R0_value_exp;
reg [7:0] last_R1_value_exp;
reg [7:0] last_R2_value_exp;
reg [7:0] last_R3_value_exp;
reg [7:0] last_result_pin_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	R0_value_prev = R0_value;
	R1_value_prev = R1_value;
	R2_value_prev = R2_value;
	R3_value_prev = R3_value;
	result_pin_prev = result_pin;
end

// update expected /o prevs

always @(trigger)
begin
	R0_value_expected_prev = R0_value_expected;
	R1_value_expected_prev = R1_value_expected;
	R2_value_expected_prev = R2_value_expected;
	R3_value_expected_prev = R3_value_expected;
	result_pin_expected_prev = result_pin_expected;
end


// expected R0_value[ 7 ]
initial
begin
	R0_value_expected[7] = 1'bX;
end 
// expected R0_value[ 6 ]
initial
begin
	R0_value_expected[6] = 1'bX;
end 
// expected R0_value[ 5 ]
initial
begin
	R0_value_expected[5] = 1'bX;
end 
// expected R0_value[ 4 ]
initial
begin
	R0_value_expected[4] = 1'bX;
end 
// expected R0_value[ 3 ]
initial
begin
	R0_value_expected[3] = 1'bX;
end 
// expected R0_value[ 2 ]
initial
begin
	R0_value_expected[2] = 1'bX;
end 
// expected R0_value[ 1 ]
initial
begin
	R0_value_expected[1] = 1'bX;
end 
// expected R0_value[ 0 ]
initial
begin
	R0_value_expected[0] = 1'bX;
end 
// expected R1_value[ 7 ]
initial
begin
	R1_value_expected[7] = 1'bX;
end 
// expected R1_value[ 6 ]
initial
begin
	R1_value_expected[6] = 1'bX;
end 
// expected R1_value[ 5 ]
initial
begin
	R1_value_expected[5] = 1'bX;
end 
// expected R1_value[ 4 ]
initial
begin
	R1_value_expected[4] = 1'bX;
end 
// expected R1_value[ 3 ]
initial
begin
	R1_value_expected[3] = 1'bX;
end 
// expected R1_value[ 2 ]
initial
begin
	R1_value_expected[2] = 1'bX;
end 
// expected R1_value[ 1 ]
initial
begin
	R1_value_expected[1] = 1'bX;
end 
// expected R1_value[ 0 ]
initial
begin
	R1_value_expected[0] = 1'bX;
end 
// expected R2_value[ 7 ]
initial
begin
	R2_value_expected[7] = 1'bX;
end 
// expected R2_value[ 6 ]
initial
begin
	R2_value_expected[6] = 1'bX;
end 
// expected R2_value[ 5 ]
initial
begin
	R2_value_expected[5] = 1'bX;
end 
// expected R2_value[ 4 ]
initial
begin
	R2_value_expected[4] = 1'bX;
end 
// expected R2_value[ 3 ]
initial
begin
	R2_value_expected[3] = 1'bX;
end 
// expected R2_value[ 2 ]
initial
begin
	R2_value_expected[2] = 1'bX;
end 
// expected R2_value[ 1 ]
initial
begin
	R2_value_expected[1] = 1'bX;
end 
// expected R2_value[ 0 ]
initial
begin
	R2_value_expected[0] = 1'bX;
end 
// expected R3_value[ 7 ]
initial
begin
	R3_value_expected[7] = 1'bX;
end 
// expected R3_value[ 6 ]
initial
begin
	R3_value_expected[6] = 1'bX;
end 
// expected R3_value[ 5 ]
initial
begin
	R3_value_expected[5] = 1'bX;
end 
// expected R3_value[ 4 ]
initial
begin
	R3_value_expected[4] = 1'bX;
end 
// expected R3_value[ 3 ]
initial
begin
	R3_value_expected[3] = 1'bX;
end 
// expected R3_value[ 2 ]
initial
begin
	R3_value_expected[2] = 1'bX;
end 
// expected R3_value[ 1 ]
initial
begin
	R3_value_expected[1] = 1'bX;
end 
// expected R3_value[ 0 ]
initial
begin
	R3_value_expected[0] = 1'bX;
end 
// expected result_pin[ 7 ]
initial
begin
	result_pin_expected[7] = 1'bX;
end 
// expected result_pin[ 6 ]
initial
begin
	result_pin_expected[6] = 1'bX;
end 
// expected result_pin[ 5 ]
initial
begin
	result_pin_expected[5] = 1'bX;
end 
// expected result_pin[ 4 ]
initial
begin
	result_pin_expected[4] = 1'bX;
end 
// expected result_pin[ 3 ]
initial
begin
	result_pin_expected[3] = 1'bX;
end 
// expected result_pin[ 2 ]
initial
begin
	result_pin_expected[2] = 1'bX;
end 
// expected result_pin[ 1 ]
initial
begin
	result_pin_expected[1] = 1'bX;
end 
// expected result_pin[ 0 ]
initial
begin
	result_pin_expected[0] = 1'bX;
end 
// generate trigger
always @(R0_value_expected or R0_value or R1_value_expected or R1_value or R2_value_expected or R2_value or R3_value_expected or R3_value or result_pin_expected or result_pin)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected R0_value = %b | expected R1_value = %b | expected R2_value = %b | expected R3_value = %b | expected result_pin = %b | ",R0_value_expected_prev,R1_value_expected_prev,R2_value_expected_prev,R3_value_expected_prev,result_pin_expected_prev);
	$display("| real R0_value = %b | real R1_value = %b | real R2_value = %b | real R3_value = %b | real result_pin = %b | ",R0_value_prev,R1_value_prev,R2_value_prev,R3_value_prev,result_pin_prev);
`endif
	if (
		( R0_value_expected_prev[0] !== 1'bx ) && ( R0_value_prev[0] !== R0_value_expected_prev[0] )
		&& ((R0_value_expected_prev[0] !== last_R0_value_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0_value[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_value_expected_prev);
		$display ("     Real value = %b", R0_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_R0_value_exp[0] = R0_value_expected_prev[0];
	end
	if (
		( R0_value_expected_prev[1] !== 1'bx ) && ( R0_value_prev[1] !== R0_value_expected_prev[1] )
		&& ((R0_value_expected_prev[1] !== last_R0_value_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0_value[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_value_expected_prev);
		$display ("     Real value = %b", R0_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_R0_value_exp[1] = R0_value_expected_prev[1];
	end
	if (
		( R0_value_expected_prev[2] !== 1'bx ) && ( R0_value_prev[2] !== R0_value_expected_prev[2] )
		&& ((R0_value_expected_prev[2] !== last_R0_value_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0_value[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_value_expected_prev);
		$display ("     Real value = %b", R0_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_R0_value_exp[2] = R0_value_expected_prev[2];
	end
	if (
		( R0_value_expected_prev[3] !== 1'bx ) && ( R0_value_prev[3] !== R0_value_expected_prev[3] )
		&& ((R0_value_expected_prev[3] !== last_R0_value_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0_value[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_value_expected_prev);
		$display ("     Real value = %b", R0_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_R0_value_exp[3] = R0_value_expected_prev[3];
	end
	if (
		( R0_value_expected_prev[4] !== 1'bx ) && ( R0_value_prev[4] !== R0_value_expected_prev[4] )
		&& ((R0_value_expected_prev[4] !== last_R0_value_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0_value[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_value_expected_prev);
		$display ("     Real value = %b", R0_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_R0_value_exp[4] = R0_value_expected_prev[4];
	end
	if (
		( R0_value_expected_prev[5] !== 1'bx ) && ( R0_value_prev[5] !== R0_value_expected_prev[5] )
		&& ((R0_value_expected_prev[5] !== last_R0_value_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0_value[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_value_expected_prev);
		$display ("     Real value = %b", R0_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_R0_value_exp[5] = R0_value_expected_prev[5];
	end
	if (
		( R0_value_expected_prev[6] !== 1'bx ) && ( R0_value_prev[6] !== R0_value_expected_prev[6] )
		&& ((R0_value_expected_prev[6] !== last_R0_value_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0_value[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_value_expected_prev);
		$display ("     Real value = %b", R0_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_R0_value_exp[6] = R0_value_expected_prev[6];
	end
	if (
		( R0_value_expected_prev[7] !== 1'bx ) && ( R0_value_prev[7] !== R0_value_expected_prev[7] )
		&& ((R0_value_expected_prev[7] !== last_R0_value_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0_value[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_value_expected_prev);
		$display ("     Real value = %b", R0_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_R0_value_exp[7] = R0_value_expected_prev[7];
	end
	if (
		( R1_value_expected_prev[0] !== 1'bx ) && ( R1_value_prev[0] !== R1_value_expected_prev[0] )
		&& ((R1_value_expected_prev[0] !== last_R1_value_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1_value[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_value_expected_prev);
		$display ("     Real value = %b", R1_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_R1_value_exp[0] = R1_value_expected_prev[0];
	end
	if (
		( R1_value_expected_prev[1] !== 1'bx ) && ( R1_value_prev[1] !== R1_value_expected_prev[1] )
		&& ((R1_value_expected_prev[1] !== last_R1_value_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1_value[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_value_expected_prev);
		$display ("     Real value = %b", R1_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_R1_value_exp[1] = R1_value_expected_prev[1];
	end
	if (
		( R1_value_expected_prev[2] !== 1'bx ) && ( R1_value_prev[2] !== R1_value_expected_prev[2] )
		&& ((R1_value_expected_prev[2] !== last_R1_value_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1_value[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_value_expected_prev);
		$display ("     Real value = %b", R1_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_R1_value_exp[2] = R1_value_expected_prev[2];
	end
	if (
		( R1_value_expected_prev[3] !== 1'bx ) && ( R1_value_prev[3] !== R1_value_expected_prev[3] )
		&& ((R1_value_expected_prev[3] !== last_R1_value_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1_value[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_value_expected_prev);
		$display ("     Real value = %b", R1_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_R1_value_exp[3] = R1_value_expected_prev[3];
	end
	if (
		( R1_value_expected_prev[4] !== 1'bx ) && ( R1_value_prev[4] !== R1_value_expected_prev[4] )
		&& ((R1_value_expected_prev[4] !== last_R1_value_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1_value[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_value_expected_prev);
		$display ("     Real value = %b", R1_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_R1_value_exp[4] = R1_value_expected_prev[4];
	end
	if (
		( R1_value_expected_prev[5] !== 1'bx ) && ( R1_value_prev[5] !== R1_value_expected_prev[5] )
		&& ((R1_value_expected_prev[5] !== last_R1_value_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1_value[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_value_expected_prev);
		$display ("     Real value = %b", R1_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_R1_value_exp[5] = R1_value_expected_prev[5];
	end
	if (
		( R1_value_expected_prev[6] !== 1'bx ) && ( R1_value_prev[6] !== R1_value_expected_prev[6] )
		&& ((R1_value_expected_prev[6] !== last_R1_value_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1_value[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_value_expected_prev);
		$display ("     Real value = %b", R1_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_R1_value_exp[6] = R1_value_expected_prev[6];
	end
	if (
		( R1_value_expected_prev[7] !== 1'bx ) && ( R1_value_prev[7] !== R1_value_expected_prev[7] )
		&& ((R1_value_expected_prev[7] !== last_R1_value_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1_value[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_value_expected_prev);
		$display ("     Real value = %b", R1_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_R1_value_exp[7] = R1_value_expected_prev[7];
	end
	if (
		( R2_value_expected_prev[0] !== 1'bx ) && ( R2_value_prev[0] !== R2_value_expected_prev[0] )
		&& ((R2_value_expected_prev[0] !== last_R2_value_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2_value[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_value_expected_prev);
		$display ("     Real value = %b", R2_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R2_value_exp[0] = R2_value_expected_prev[0];
	end
	if (
		( R2_value_expected_prev[1] !== 1'bx ) && ( R2_value_prev[1] !== R2_value_expected_prev[1] )
		&& ((R2_value_expected_prev[1] !== last_R2_value_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2_value[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_value_expected_prev);
		$display ("     Real value = %b", R2_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R2_value_exp[1] = R2_value_expected_prev[1];
	end
	if (
		( R2_value_expected_prev[2] !== 1'bx ) && ( R2_value_prev[2] !== R2_value_expected_prev[2] )
		&& ((R2_value_expected_prev[2] !== last_R2_value_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2_value[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_value_expected_prev);
		$display ("     Real value = %b", R2_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R2_value_exp[2] = R2_value_expected_prev[2];
	end
	if (
		( R2_value_expected_prev[3] !== 1'bx ) && ( R2_value_prev[3] !== R2_value_expected_prev[3] )
		&& ((R2_value_expected_prev[3] !== last_R2_value_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2_value[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_value_expected_prev);
		$display ("     Real value = %b", R2_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R2_value_exp[3] = R2_value_expected_prev[3];
	end
	if (
		( R2_value_expected_prev[4] !== 1'bx ) && ( R2_value_prev[4] !== R2_value_expected_prev[4] )
		&& ((R2_value_expected_prev[4] !== last_R2_value_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2_value[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_value_expected_prev);
		$display ("     Real value = %b", R2_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R2_value_exp[4] = R2_value_expected_prev[4];
	end
	if (
		( R2_value_expected_prev[5] !== 1'bx ) && ( R2_value_prev[5] !== R2_value_expected_prev[5] )
		&& ((R2_value_expected_prev[5] !== last_R2_value_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2_value[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_value_expected_prev);
		$display ("     Real value = %b", R2_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R2_value_exp[5] = R2_value_expected_prev[5];
	end
	if (
		( R2_value_expected_prev[6] !== 1'bx ) && ( R2_value_prev[6] !== R2_value_expected_prev[6] )
		&& ((R2_value_expected_prev[6] !== last_R2_value_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2_value[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_value_expected_prev);
		$display ("     Real value = %b", R2_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R2_value_exp[6] = R2_value_expected_prev[6];
	end
	if (
		( R2_value_expected_prev[7] !== 1'bx ) && ( R2_value_prev[7] !== R2_value_expected_prev[7] )
		&& ((R2_value_expected_prev[7] !== last_R2_value_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2_value[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_value_expected_prev);
		$display ("     Real value = %b", R2_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R2_value_exp[7] = R2_value_expected_prev[7];
	end
	if (
		( R3_value_expected_prev[0] !== 1'bx ) && ( R3_value_prev[0] !== R3_value_expected_prev[0] )
		&& ((R3_value_expected_prev[0] !== last_R3_value_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R3_value[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R3_value_expected_prev);
		$display ("     Real value = %b", R3_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_R3_value_exp[0] = R3_value_expected_prev[0];
	end
	if (
		( R3_value_expected_prev[1] !== 1'bx ) && ( R3_value_prev[1] !== R3_value_expected_prev[1] )
		&& ((R3_value_expected_prev[1] !== last_R3_value_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R3_value[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R3_value_expected_prev);
		$display ("     Real value = %b", R3_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_R3_value_exp[1] = R3_value_expected_prev[1];
	end
	if (
		( R3_value_expected_prev[2] !== 1'bx ) && ( R3_value_prev[2] !== R3_value_expected_prev[2] )
		&& ((R3_value_expected_prev[2] !== last_R3_value_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R3_value[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R3_value_expected_prev);
		$display ("     Real value = %b", R3_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_R3_value_exp[2] = R3_value_expected_prev[2];
	end
	if (
		( R3_value_expected_prev[3] !== 1'bx ) && ( R3_value_prev[3] !== R3_value_expected_prev[3] )
		&& ((R3_value_expected_prev[3] !== last_R3_value_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R3_value[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R3_value_expected_prev);
		$display ("     Real value = %b", R3_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_R3_value_exp[3] = R3_value_expected_prev[3];
	end
	if (
		( R3_value_expected_prev[4] !== 1'bx ) && ( R3_value_prev[4] !== R3_value_expected_prev[4] )
		&& ((R3_value_expected_prev[4] !== last_R3_value_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R3_value[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R3_value_expected_prev);
		$display ("     Real value = %b", R3_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_R3_value_exp[4] = R3_value_expected_prev[4];
	end
	if (
		( R3_value_expected_prev[5] !== 1'bx ) && ( R3_value_prev[5] !== R3_value_expected_prev[5] )
		&& ((R3_value_expected_prev[5] !== last_R3_value_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R3_value[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R3_value_expected_prev);
		$display ("     Real value = %b", R3_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_R3_value_exp[5] = R3_value_expected_prev[5];
	end
	if (
		( R3_value_expected_prev[6] !== 1'bx ) && ( R3_value_prev[6] !== R3_value_expected_prev[6] )
		&& ((R3_value_expected_prev[6] !== last_R3_value_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R3_value[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R3_value_expected_prev);
		$display ("     Real value = %b", R3_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_R3_value_exp[6] = R3_value_expected_prev[6];
	end
	if (
		( R3_value_expected_prev[7] !== 1'bx ) && ( R3_value_prev[7] !== R3_value_expected_prev[7] )
		&& ((R3_value_expected_prev[7] !== last_R3_value_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R3_value[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R3_value_expected_prev);
		$display ("     Real value = %b", R3_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_R3_value_exp[7] = R3_value_expected_prev[7];
	end
	if (
		( result_pin_expected_prev[0] !== 1'bx ) && ( result_pin_prev[0] !== result_pin_expected_prev[0] )
		&& ((result_pin_expected_prev[0] !== last_result_pin_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_pin[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_pin_expected_prev);
		$display ("     Real value = %b", result_pin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_result_pin_exp[0] = result_pin_expected_prev[0];
	end
	if (
		( result_pin_expected_prev[1] !== 1'bx ) && ( result_pin_prev[1] !== result_pin_expected_prev[1] )
		&& ((result_pin_expected_prev[1] !== last_result_pin_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_pin[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_pin_expected_prev);
		$display ("     Real value = %b", result_pin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_result_pin_exp[1] = result_pin_expected_prev[1];
	end
	if (
		( result_pin_expected_prev[2] !== 1'bx ) && ( result_pin_prev[2] !== result_pin_expected_prev[2] )
		&& ((result_pin_expected_prev[2] !== last_result_pin_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_pin[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_pin_expected_prev);
		$display ("     Real value = %b", result_pin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_result_pin_exp[2] = result_pin_expected_prev[2];
	end
	if (
		( result_pin_expected_prev[3] !== 1'bx ) && ( result_pin_prev[3] !== result_pin_expected_prev[3] )
		&& ((result_pin_expected_prev[3] !== last_result_pin_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_pin[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_pin_expected_prev);
		$display ("     Real value = %b", result_pin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_result_pin_exp[3] = result_pin_expected_prev[3];
	end
	if (
		( result_pin_expected_prev[4] !== 1'bx ) && ( result_pin_prev[4] !== result_pin_expected_prev[4] )
		&& ((result_pin_expected_prev[4] !== last_result_pin_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_pin[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_pin_expected_prev);
		$display ("     Real value = %b", result_pin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_result_pin_exp[4] = result_pin_expected_prev[4];
	end
	if (
		( result_pin_expected_prev[5] !== 1'bx ) && ( result_pin_prev[5] !== result_pin_expected_prev[5] )
		&& ((result_pin_expected_prev[5] !== last_result_pin_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_pin[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_pin_expected_prev);
		$display ("     Real value = %b", result_pin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_result_pin_exp[5] = result_pin_expected_prev[5];
	end
	if (
		( result_pin_expected_prev[6] !== 1'bx ) && ( result_pin_prev[6] !== result_pin_expected_prev[6] )
		&& ((result_pin_expected_prev[6] !== last_result_pin_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_pin[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_pin_expected_prev);
		$display ("     Real value = %b", result_pin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_result_pin_exp[6] = result_pin_expected_prev[6];
	end
	if (
		( result_pin_expected_prev[7] !== 1'bx ) && ( result_pin_prev[7] !== result_pin_expected_prev[7] )
		&& ((result_pin_expected_prev[7] !== last_result_pin_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result_pin[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_pin_expected_prev);
		$display ("     Real value = %b", result_pin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_result_pin_exp[7] = result_pin_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Q1_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg [2:0] instr0;
reg [2:0] instr1;
reg [2:0] instr2;
reg [2:0] instr3;
reg [2:0] operand1;
reg [2:0] opernad0;
// wires                                               
wire [7:0] R0_value;
wire [7:0] R1_value;
wire [7:0] R2_value;
wire [7:0] R3_value;
wire [7:0] result_pin;

wire sampler;                             

// assign statements (if any)                          
Q1 i1 (
// port map - connection between master ports and signals/registers   
	.clock(clock),
	.instr0(instr0),
	.instr1(instr1),
	.instr2(instr2),
	.instr3(instr3),
	.operand1(operand1),
	.opernad0(opernad0),
	.R0_value(R0_value),
	.R1_value(R1_value),
	.R2_value(R2_value),
	.R3_value(R3_value),
	.result_pin(result_pin)
);

// clock
always
begin
	clock = 1'b0;
	clock = #25000 1'b1;
	#25000;
end 
// instr0[ 2 ]
initial
begin
	instr0[2] = 1'b0;
	instr0[2] = #760000 1'b1;
end 
// instr0[ 1 ]
initial
begin
	instr0[1] = 1'b0;
end 
// instr0[ 0 ]
initial
begin
	instr0[0] = 1'b0;
end 
// instr1[ 2 ]
initial
begin
	instr1[2] = 1'b0;
end 
// instr1[ 1 ]
initial
begin
	instr1[1] = 1'b0;
	instr1[1] = #250000 1'b1;
	instr1[1] = #380000 1'b0;
end 
// instr1[ 0 ]
initial
begin
	instr1[0] = 1'b1;
	instr1[0] = #250000 1'b0;
	instr1[0] = #380000 1'b1;
end 
// instr2[ 2 ]
initial
begin
	instr2[2] = 1'b1;
	instr2[2] = #250000 1'b0;
	instr2[2] = #380000 1'b1;
	instr2[2] = #130000 1'b0;
end 
// instr2[ 1 ]
initial
begin
	instr2[1] = 1'b0;
	instr2[1] = #250000 1'b1;
	instr2[1] = #380000 1'b0;
	instr2[1] = #130000 1'b1;
end 
// instr2[ 0 ]
initial
begin
	instr2[0] = 1'b0;
end 
// instr3[ 2 ]
initial
begin
	instr3[2] = 1'b0;
end 
// instr3[ 1 ]
initial
begin
	instr3[1] = 1'b1;
end 
// instr3[ 0 ]
initial
begin
	instr3[0] = 1'b1;
end 
// operand1[ 2 ]
initial
begin
	operand1[2] = 1'b1;
	operand1[2] = #760000 1'b0;
end 
// operand1[ 1 ]
initial
begin
	operand1[1] = 1'b0;
	operand1[1] = #760000 1'b1;
	operand1[1] = #90000 1'b0;
end 
// operand1[ 0 ]
initial
begin
	operand1[0] = 1'b0;
	operand1[0] = #630000 1'b1;
	operand1[0] = #130000 1'b0;
end 
// opernad0[ 2 ]
initial
begin
	opernad0[2] = 1'b0;
end 
// opernad0[ 1 ]
initial
begin
	opernad0[1] = 1'b1;
	opernad0[1] = #760000 1'b0;
end 
// opernad0[ 0 ]
initial
begin
	opernad0[0] = 1'b0;
	opernad0[0] = #760000 1'b1;
	opernad0[0] = #90000 1'b0;
end 

Q1_vlg_sample_tst tb_sample (
	.clock(clock),
	.instr0(instr0),
	.instr1(instr1),
	.instr2(instr2),
	.instr3(instr3),
	.operand1(operand1),
	.opernad0(opernad0),
	.sampler_tx(sampler)
);

Q1_vlg_check_tst tb_out(
	.R0_value(R0_value),
	.R1_value(R1_value),
	.R2_value(R2_value),
	.R3_value(R3_value),
	.result_pin(result_pin),
	.sampler_rx(sampler)
);
endmodule

