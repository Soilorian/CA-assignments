// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/05/2024 16:13:06"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    mux_4
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module mux_4_vlg_sample_tst(
	data0,
	data1,
	data2,
	data3,
	sel,
	sampler_tx
);
input [31:0] data0;
input [31:0] data1;
input [31:0] data2;
input [31:0] data3;
input [1:0] sel;
output sampler_tx;

reg sample;
time current_time;
always @(data0 or data1 or data2 or data3 or sel)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module mux_4_vlg_check_tst (
	mux_output,
	sampler_rx
);
input [31:0] mux_output;
input sampler_rx;

reg [31:0] mux_output_expected;

reg [31:0] mux_output_prev;

reg [31:0] mux_output_expected_prev;

reg [31:0] last_mux_output_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	mux_output_prev = mux_output;
end

// update expected /o prevs

always @(trigger)
begin
	mux_output_expected_prev = mux_output_expected;
end


// expected mux_output[ 31 ]
initial
begin
	mux_output_expected[31] = 1'bX;
end 
// expected mux_output[ 30 ]
initial
begin
	mux_output_expected[30] = 1'bX;
end 
// expected mux_output[ 29 ]
initial
begin
	mux_output_expected[29] = 1'bX;
end 
// expected mux_output[ 28 ]
initial
begin
	mux_output_expected[28] = 1'bX;
end 
// expected mux_output[ 27 ]
initial
begin
	mux_output_expected[27] = 1'bX;
end 
// expected mux_output[ 26 ]
initial
begin
	mux_output_expected[26] = 1'bX;
end 
// expected mux_output[ 25 ]
initial
begin
	mux_output_expected[25] = 1'bX;
end 
// expected mux_output[ 24 ]
initial
begin
	mux_output_expected[24] = 1'bX;
end 
// expected mux_output[ 23 ]
initial
begin
	mux_output_expected[23] = 1'bX;
end 
// expected mux_output[ 22 ]
initial
begin
	mux_output_expected[22] = 1'bX;
end 
// expected mux_output[ 21 ]
initial
begin
	mux_output_expected[21] = 1'bX;
end 
// expected mux_output[ 20 ]
initial
begin
	mux_output_expected[20] = 1'bX;
end 
// expected mux_output[ 19 ]
initial
begin
	mux_output_expected[19] = 1'bX;
end 
// expected mux_output[ 18 ]
initial
begin
	mux_output_expected[18] = 1'bX;
end 
// expected mux_output[ 17 ]
initial
begin
	mux_output_expected[17] = 1'bX;
end 
// expected mux_output[ 16 ]
initial
begin
	mux_output_expected[16] = 1'bX;
end 
// expected mux_output[ 15 ]
initial
begin
	mux_output_expected[15] = 1'bX;
end 
// expected mux_output[ 14 ]
initial
begin
	mux_output_expected[14] = 1'bX;
end 
// expected mux_output[ 13 ]
initial
begin
	mux_output_expected[13] = 1'bX;
end 
// expected mux_output[ 12 ]
initial
begin
	mux_output_expected[12] = 1'bX;
end 
// expected mux_output[ 11 ]
initial
begin
	mux_output_expected[11] = 1'bX;
end 
// expected mux_output[ 10 ]
initial
begin
	mux_output_expected[10] = 1'bX;
end 
// expected mux_output[ 9 ]
initial
begin
	mux_output_expected[9] = 1'bX;
end 
// expected mux_output[ 8 ]
initial
begin
	mux_output_expected[8] = 1'bX;
end 
// expected mux_output[ 7 ]
initial
begin
	mux_output_expected[7] = 1'bX;
end 
// expected mux_output[ 6 ]
initial
begin
	mux_output_expected[6] = 1'bX;
end 
// expected mux_output[ 5 ]
initial
begin
	mux_output_expected[5] = 1'bX;
end 
// expected mux_output[ 4 ]
initial
begin
	mux_output_expected[4] = 1'bX;
end 
// expected mux_output[ 3 ]
initial
begin
	mux_output_expected[3] = 1'bX;
end 
// expected mux_output[ 2 ]
initial
begin
	mux_output_expected[2] = 1'bX;
end 
// expected mux_output[ 1 ]
initial
begin
	mux_output_expected[1] = 1'bX;
end 
// expected mux_output[ 0 ]
initial
begin
	mux_output_expected[0] = 1'bX;
end 
// generate trigger
always @(mux_output_expected or mux_output)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected mux_output = %b | ",mux_output_expected_prev);
	$display("| real mux_output = %b | ",mux_output_prev);
`endif
	if (
		( mux_output_expected_prev[0] !== 1'bx ) && ( mux_output_prev[0] !== mux_output_expected_prev[0] )
		&& ((mux_output_expected_prev[0] !== last_mux_output_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mux_output[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mux_output_expected_prev);
		$display ("     Real value = %b", mux_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mux_output_exp[0] = mux_output_expected_prev[0];
	end
	if (
		( mux_output_expected_prev[1] !== 1'bx ) && ( mux_output_prev[1] !== mux_output_expected_prev[1] )
		&& ((mux_output_expected_prev[1] !== last_mux_output_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mux_output[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mux_output_expected_prev);
		$display ("     Real value = %b", mux_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mux_output_exp[1] = mux_output_expected_prev[1];
	end
	if (
		( mux_output_expected_prev[2] !== 1'bx ) && ( mux_output_prev[2] !== mux_output_expected_prev[2] )
		&& ((mux_output_expected_prev[2] !== last_mux_output_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mux_output[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mux_output_expected_prev);
		$display ("     Real value = %b", mux_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mux_output_exp[2] = mux_output_expected_prev[2];
	end
	if (
		( mux_output_expected_prev[3] !== 1'bx ) && ( mux_output_prev[3] !== mux_output_expected_prev[3] )
		&& ((mux_output_expected_prev[3] !== last_mux_output_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mux_output[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mux_output_expected_prev);
		$display ("     Real value = %b", mux_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mux_output_exp[3] = mux_output_expected_prev[3];
	end
	if (
		( mux_output_expected_prev[4] !== 1'bx ) && ( mux_output_prev[4] !== mux_output_expected_prev[4] )
		&& ((mux_output_expected_prev[4] !== last_mux_output_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mux_output[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mux_output_expected_prev);
		$display ("     Real value = %b", mux_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mux_output_exp[4] = mux_output_expected_prev[4];
	end
	if (
		( mux_output_expected_prev[5] !== 1'bx ) && ( mux_output_prev[5] !== mux_output_expected_prev[5] )
		&& ((mux_output_expected_prev[5] !== last_mux_output_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mux_output[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mux_output_expected_prev);
		$display ("     Real value = %b", mux_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mux_output_exp[5] = mux_output_expected_prev[5];
	end
	if (
		( mux_output_expected_prev[6] !== 1'bx ) && ( mux_output_prev[6] !== mux_output_expected_prev[6] )
		&& ((mux_output_expected_prev[6] !== last_mux_output_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mux_output[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mux_output_expected_prev);
		$display ("     Real value = %b", mux_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mux_output_exp[6] = mux_output_expected_prev[6];
	end
	if (
		( mux_output_expected_prev[7] !== 1'bx ) && ( mux_output_prev[7] !== mux_output_expected_prev[7] )
		&& ((mux_output_expected_prev[7] !== last_mux_output_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mux_output[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mux_output_expected_prev);
		$display ("     Real value = %b", mux_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mux_output_exp[7] = mux_output_expected_prev[7];
	end
	if (
		( mux_output_expected_prev[8] !== 1'bx ) && ( mux_output_prev[8] !== mux_output_expected_prev[8] )
		&& ((mux_output_expected_prev[8] !== last_mux_output_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mux_output[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mux_output_expected_prev);
		$display ("     Real value = %b", mux_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mux_output_exp[8] = mux_output_expected_prev[8];
	end
	if (
		( mux_output_expected_prev[9] !== 1'bx ) && ( mux_output_prev[9] !== mux_output_expected_prev[9] )
		&& ((mux_output_expected_prev[9] !== last_mux_output_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mux_output[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mux_output_expected_prev);
		$display ("     Real value = %b", mux_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mux_output_exp[9] = mux_output_expected_prev[9];
	end
	if (
		( mux_output_expected_prev[10] !== 1'bx ) && ( mux_output_prev[10] !== mux_output_expected_prev[10] )
		&& ((mux_output_expected_prev[10] !== last_mux_output_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mux_output[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mux_output_expected_prev);
		$display ("     Real value = %b", mux_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mux_output_exp[10] = mux_output_expected_prev[10];
	end
	if (
		( mux_output_expected_prev[11] !== 1'bx ) && ( mux_output_prev[11] !== mux_output_expected_prev[11] )
		&& ((mux_output_expected_prev[11] !== last_mux_output_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mux_output[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mux_output_expected_prev);
		$display ("     Real value = %b", mux_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mux_output_exp[11] = mux_output_expected_prev[11];
	end
	if (
		( mux_output_expected_prev[12] !== 1'bx ) && ( mux_output_prev[12] !== mux_output_expected_prev[12] )
		&& ((mux_output_expected_prev[12] !== last_mux_output_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mux_output[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mux_output_expected_prev);
		$display ("     Real value = %b", mux_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mux_output_exp[12] = mux_output_expected_prev[12];
	end
	if (
		( mux_output_expected_prev[13] !== 1'bx ) && ( mux_output_prev[13] !== mux_output_expected_prev[13] )
		&& ((mux_output_expected_prev[13] !== last_mux_output_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mux_output[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mux_output_expected_prev);
		$display ("     Real value = %b", mux_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mux_output_exp[13] = mux_output_expected_prev[13];
	end
	if (
		( mux_output_expected_prev[14] !== 1'bx ) && ( mux_output_prev[14] !== mux_output_expected_prev[14] )
		&& ((mux_output_expected_prev[14] !== last_mux_output_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mux_output[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mux_output_expected_prev);
		$display ("     Real value = %b", mux_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mux_output_exp[14] = mux_output_expected_prev[14];
	end
	if (
		( mux_output_expected_prev[15] !== 1'bx ) && ( mux_output_prev[15] !== mux_output_expected_prev[15] )
		&& ((mux_output_expected_prev[15] !== last_mux_output_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mux_output[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mux_output_expected_prev);
		$display ("     Real value = %b", mux_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mux_output_exp[15] = mux_output_expected_prev[15];
	end
	if (
		( mux_output_expected_prev[16] !== 1'bx ) && ( mux_output_prev[16] !== mux_output_expected_prev[16] )
		&& ((mux_output_expected_prev[16] !== last_mux_output_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mux_output[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mux_output_expected_prev);
		$display ("     Real value = %b", mux_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mux_output_exp[16] = mux_output_expected_prev[16];
	end
	if (
		( mux_output_expected_prev[17] !== 1'bx ) && ( mux_output_prev[17] !== mux_output_expected_prev[17] )
		&& ((mux_output_expected_prev[17] !== last_mux_output_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mux_output[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mux_output_expected_prev);
		$display ("     Real value = %b", mux_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mux_output_exp[17] = mux_output_expected_prev[17];
	end
	if (
		( mux_output_expected_prev[18] !== 1'bx ) && ( mux_output_prev[18] !== mux_output_expected_prev[18] )
		&& ((mux_output_expected_prev[18] !== last_mux_output_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mux_output[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mux_output_expected_prev);
		$display ("     Real value = %b", mux_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mux_output_exp[18] = mux_output_expected_prev[18];
	end
	if (
		( mux_output_expected_prev[19] !== 1'bx ) && ( mux_output_prev[19] !== mux_output_expected_prev[19] )
		&& ((mux_output_expected_prev[19] !== last_mux_output_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mux_output[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mux_output_expected_prev);
		$display ("     Real value = %b", mux_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mux_output_exp[19] = mux_output_expected_prev[19];
	end
	if (
		( mux_output_expected_prev[20] !== 1'bx ) && ( mux_output_prev[20] !== mux_output_expected_prev[20] )
		&& ((mux_output_expected_prev[20] !== last_mux_output_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mux_output[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mux_output_expected_prev);
		$display ("     Real value = %b", mux_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mux_output_exp[20] = mux_output_expected_prev[20];
	end
	if (
		( mux_output_expected_prev[21] !== 1'bx ) && ( mux_output_prev[21] !== mux_output_expected_prev[21] )
		&& ((mux_output_expected_prev[21] !== last_mux_output_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mux_output[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mux_output_expected_prev);
		$display ("     Real value = %b", mux_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mux_output_exp[21] = mux_output_expected_prev[21];
	end
	if (
		( mux_output_expected_prev[22] !== 1'bx ) && ( mux_output_prev[22] !== mux_output_expected_prev[22] )
		&& ((mux_output_expected_prev[22] !== last_mux_output_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mux_output[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mux_output_expected_prev);
		$display ("     Real value = %b", mux_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mux_output_exp[22] = mux_output_expected_prev[22];
	end
	if (
		( mux_output_expected_prev[23] !== 1'bx ) && ( mux_output_prev[23] !== mux_output_expected_prev[23] )
		&& ((mux_output_expected_prev[23] !== last_mux_output_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mux_output[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mux_output_expected_prev);
		$display ("     Real value = %b", mux_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mux_output_exp[23] = mux_output_expected_prev[23];
	end
	if (
		( mux_output_expected_prev[24] !== 1'bx ) && ( mux_output_prev[24] !== mux_output_expected_prev[24] )
		&& ((mux_output_expected_prev[24] !== last_mux_output_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mux_output[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mux_output_expected_prev);
		$display ("     Real value = %b", mux_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mux_output_exp[24] = mux_output_expected_prev[24];
	end
	if (
		( mux_output_expected_prev[25] !== 1'bx ) && ( mux_output_prev[25] !== mux_output_expected_prev[25] )
		&& ((mux_output_expected_prev[25] !== last_mux_output_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mux_output[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mux_output_expected_prev);
		$display ("     Real value = %b", mux_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mux_output_exp[25] = mux_output_expected_prev[25];
	end
	if (
		( mux_output_expected_prev[26] !== 1'bx ) && ( mux_output_prev[26] !== mux_output_expected_prev[26] )
		&& ((mux_output_expected_prev[26] !== last_mux_output_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mux_output[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mux_output_expected_prev);
		$display ("     Real value = %b", mux_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mux_output_exp[26] = mux_output_expected_prev[26];
	end
	if (
		( mux_output_expected_prev[27] !== 1'bx ) && ( mux_output_prev[27] !== mux_output_expected_prev[27] )
		&& ((mux_output_expected_prev[27] !== last_mux_output_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mux_output[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mux_output_expected_prev);
		$display ("     Real value = %b", mux_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mux_output_exp[27] = mux_output_expected_prev[27];
	end
	if (
		( mux_output_expected_prev[28] !== 1'bx ) && ( mux_output_prev[28] !== mux_output_expected_prev[28] )
		&& ((mux_output_expected_prev[28] !== last_mux_output_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mux_output[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mux_output_expected_prev);
		$display ("     Real value = %b", mux_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mux_output_exp[28] = mux_output_expected_prev[28];
	end
	if (
		( mux_output_expected_prev[29] !== 1'bx ) && ( mux_output_prev[29] !== mux_output_expected_prev[29] )
		&& ((mux_output_expected_prev[29] !== last_mux_output_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mux_output[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mux_output_expected_prev);
		$display ("     Real value = %b", mux_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mux_output_exp[29] = mux_output_expected_prev[29];
	end
	if (
		( mux_output_expected_prev[30] !== 1'bx ) && ( mux_output_prev[30] !== mux_output_expected_prev[30] )
		&& ((mux_output_expected_prev[30] !== last_mux_output_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mux_output[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mux_output_expected_prev);
		$display ("     Real value = %b", mux_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mux_output_exp[30] = mux_output_expected_prev[30];
	end
	if (
		( mux_output_expected_prev[31] !== 1'bx ) && ( mux_output_prev[31] !== mux_output_expected_prev[31] )
		&& ((mux_output_expected_prev[31] !== last_mux_output_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mux_output[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mux_output_expected_prev);
		$display ("     Real value = %b", mux_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mux_output_exp[31] = mux_output_expected_prev[31];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module mux_4_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [31:0] data0;
reg [31:0] data1;
reg [31:0] data2;
reg [31:0] data3;
reg [1:0] sel;
// wires                                               
wire [31:0] mux_output;

wire sampler;                             

// assign statements (if any)                          
mux_4 i1 (
// port map - connection between master ports and signals/registers   
	.data0(data0),
	.data1(data1),
	.data2(data2),
	.data3(data3),
	.mux_output(mux_output),
	.sel(sel)
);
// data0[ 31 ]
initial
begin
	data0[31] = 1'b0;
end 
// data0[ 30 ]
initial
begin
	data0[30] = 1'b0;
end 
// data0[ 29 ]
initial
begin
	data0[29] = 1'b0;
end 
// data0[ 28 ]
initial
begin
	data0[28] = 1'b0;
end 
// data0[ 27 ]
initial
begin
	data0[27] = 1'b0;
end 
// data0[ 26 ]
initial
begin
	data0[26] = 1'b0;
end 
// data0[ 25 ]
initial
begin
	data0[25] = 1'b0;
end 
// data0[ 24 ]
initial
begin
	data0[24] = 1'b0;
end 
// data0[ 23 ]
initial
begin
	data0[23] = 1'b0;
end 
// data0[ 22 ]
initial
begin
	data0[22] = 1'b0;
end 
// data0[ 21 ]
initial
begin
	data0[21] = 1'b0;
end 
// data0[ 20 ]
initial
begin
	data0[20] = 1'b0;
end 
// data0[ 19 ]
initial
begin
	data0[19] = 1'b0;
end 
// data0[ 18 ]
initial
begin
	data0[18] = 1'b0;
end 
// data0[ 17 ]
initial
begin
	data0[17] = 1'b0;
end 
// data0[ 16 ]
initial
begin
	data0[16] = 1'b0;
end 
// data0[ 15 ]
initial
begin
	data0[15] = 1'b0;
end 
// data0[ 14 ]
initial
begin
	data0[14] = 1'b0;
end 
// data0[ 13 ]
initial
begin
	data0[13] = 1'b0;
end 
// data0[ 12 ]
initial
begin
	data0[12] = 1'b0;
end 
// data0[ 11 ]
initial
begin
	data0[11] = 1'b0;
end 
// data0[ 10 ]
initial
begin
	data0[10] = 1'b0;
end 
// data0[ 9 ]
initial
begin
	data0[9] = 1'b0;
end 
// data0[ 8 ]
initial
begin
	data0[8] = 1'b0;
end 
// data0[ 7 ]
initial
begin
	data0[7] = 1'b1;
	data0[7] = #280000 1'b0;
end 
// data0[ 6 ]
initial
begin
	data0[6] = 1'b0;
end 
// data0[ 5 ]
initial
begin
	data0[5] = 1'b0;
end 
// data0[ 4 ]
initial
begin
	data0[4] = 1'b1;
	data0[4] = #280000 1'b0;
end 
// data0[ 3 ]
initial
begin
	data0[3] = 1'b0;
end 
// data0[ 2 ]
initial
begin
	data0[2] = 1'b1;
	data0[2] = #280000 1'b0;
end 
// data0[ 1 ]
initial
begin
	data0[1] = 1'b1;
	data0[1] = #280000 1'b0;
end 
// data0[ 0 ]
initial
begin
	data0[0] = 1'b0;
end 
// data1[ 31 ]
initial
begin
	data1[31] = 1'b0;
end 
// data1[ 30 ]
initial
begin
	data1[30] = 1'b0;
end 
// data1[ 29 ]
initial
begin
	data1[29] = 1'b0;
end 
// data1[ 28 ]
initial
begin
	data1[28] = 1'b0;
end 
// data1[ 27 ]
initial
begin
	data1[27] = 1'b0;
end 
// data1[ 26 ]
initial
begin
	data1[26] = 1'b0;
end 
// data1[ 25 ]
initial
begin
	data1[25] = 1'b0;
end 
// data1[ 24 ]
initial
begin
	data1[24] = 1'b0;
end 
// data1[ 23 ]
initial
begin
	data1[23] = 1'b0;
end 
// data1[ 22 ]
initial
begin
	data1[22] = 1'b0;
end 
// data1[ 21 ]
initial
begin
	data1[21] = 1'b0;
end 
// data1[ 20 ]
initial
begin
	data1[20] = 1'b0;
end 
// data1[ 19 ]
initial
begin
	data1[19] = 1'b0;
end 
// data1[ 18 ]
initial
begin
	data1[18] = 1'b0;
end 
// data1[ 17 ]
initial
begin
	data1[17] = 1'b0;
end 
// data1[ 16 ]
initial
begin
	data1[16] = 1'b0;
end 
// data1[ 15 ]
initial
begin
	data1[15] = 1'b0;
end 
// data1[ 14 ]
initial
begin
	data1[14] = 1'b0;
end 
// data1[ 13 ]
initial
begin
	data1[13] = 1'b0;
end 
// data1[ 12 ]
initial
begin
	data1[12] = 1'b0;
end 
// data1[ 11 ]
initial
begin
	data1[11] = 1'b0;
end 
// data1[ 10 ]
initial
begin
	data1[10] = 1'b0;
end 
// data1[ 9 ]
initial
begin
	data1[9] = 1'b0;
end 
// data1[ 8 ]
initial
begin
	data1[8] = 1'b0;
end 
// data1[ 7 ]
initial
begin
	data1[7] = 1'b0;
end 
// data1[ 6 ]
initial
begin
	data1[6] = 1'b1;
	data1[6] = #280000 1'b0;
end 
// data1[ 5 ]
initial
begin
	data1[5] = 1'b1;
	data1[5] = #280000 1'b0;
end 
// data1[ 4 ]
initial
begin
	data1[4] = 1'b0;
end 
// data1[ 3 ]
initial
begin
	data1[3] = 1'b0;
end 
// data1[ 2 ]
initial
begin
	data1[2] = 1'b1;
	data1[2] = #280000 1'b0;
end 
// data1[ 1 ]
initial
begin
	data1[1] = 1'b0;
end 
// data1[ 0 ]
initial
begin
	data1[0] = 1'b0;
end 
// data2[ 31 ]
initial
begin
	data2[31] = 1'b0;
end 
// data2[ 30 ]
initial
begin
	data2[30] = 1'b0;
end 
// data2[ 29 ]
initial
begin
	data2[29] = 1'b0;
end 
// data2[ 28 ]
initial
begin
	data2[28] = 1'b0;
end 
// data2[ 27 ]
initial
begin
	data2[27] = 1'b0;
end 
// data2[ 26 ]
initial
begin
	data2[26] = 1'b0;
end 
// data2[ 25 ]
initial
begin
	data2[25] = 1'b0;
end 
// data2[ 24 ]
initial
begin
	data2[24] = 1'b0;
end 
// data2[ 23 ]
initial
begin
	data2[23] = 1'b0;
end 
// data2[ 22 ]
initial
begin
	data2[22] = 1'b0;
end 
// data2[ 21 ]
initial
begin
	data2[21] = 1'b0;
end 
// data2[ 20 ]
initial
begin
	data2[20] = 1'b0;
end 
// data2[ 19 ]
initial
begin
	data2[19] = 1'b0;
end 
// data2[ 18 ]
initial
begin
	data2[18] = 1'b0;
end 
// data2[ 17 ]
initial
begin
	data2[17] = 1'b0;
end 
// data2[ 16 ]
initial
begin
	data2[16] = 1'b0;
end 
// data2[ 15 ]
initial
begin
	data2[15] = 1'b0;
end 
// data2[ 14 ]
initial
begin
	data2[14] = 1'b0;
end 
// data2[ 13 ]
initial
begin
	data2[13] = 1'b0;
end 
// data2[ 12 ]
initial
begin
	data2[12] = 1'b0;
end 
// data2[ 11 ]
initial
begin
	data2[11] = 1'b0;
end 
// data2[ 10 ]
initial
begin
	data2[10] = 1'b0;
end 
// data2[ 9 ]
initial
begin
	data2[9] = 1'b0;
end 
// data2[ 8 ]
initial
begin
	data2[8] = 1'b0;
end 
// data2[ 7 ]
initial
begin
	data2[7] = 1'b1;
	data2[7] = #280000 1'b0;
end 
// data2[ 6 ]
initial
begin
	data2[6] = 1'b1;
	data2[6] = #280000 1'b0;
end 
// data2[ 5 ]
initial
begin
	data2[5] = 1'b0;
end 
// data2[ 4 ]
initial
begin
	data2[4] = 1'b0;
end 
// data2[ 3 ]
initial
begin
	data2[3] = 1'b1;
	data2[3] = #280000 1'b0;
end 
// data2[ 2 ]
initial
begin
	data2[2] = 1'b0;
end 
// data2[ 1 ]
initial
begin
	data2[1] = 1'b0;
end 
// data2[ 0 ]
initial
begin
	data2[0] = 1'b0;
end 
// data3[ 31 ]
initial
begin
	data3[31] = 1'b0;
end 
// data3[ 30 ]
initial
begin
	data3[30] = 1'b0;
end 
// data3[ 29 ]
initial
begin
	data3[29] = 1'b0;
end 
// data3[ 28 ]
initial
begin
	data3[28] = 1'b0;
end 
// data3[ 27 ]
initial
begin
	data3[27] = 1'b0;
end 
// data3[ 26 ]
initial
begin
	data3[26] = 1'b0;
end 
// data3[ 25 ]
initial
begin
	data3[25] = 1'b0;
end 
// data3[ 24 ]
initial
begin
	data3[24] = 1'b0;
end 
// data3[ 23 ]
initial
begin
	data3[23] = 1'b0;
end 
// data3[ 22 ]
initial
begin
	data3[22] = 1'b0;
end 
// data3[ 21 ]
initial
begin
	data3[21] = 1'b0;
end 
// data3[ 20 ]
initial
begin
	data3[20] = 1'b0;
end 
// data3[ 19 ]
initial
begin
	data3[19] = 1'b0;
end 
// data3[ 18 ]
initial
begin
	data3[18] = 1'b0;
end 
// data3[ 17 ]
initial
begin
	data3[17] = 1'b0;
end 
// data3[ 16 ]
initial
begin
	data3[16] = 1'b0;
end 
// data3[ 15 ]
initial
begin
	data3[15] = 1'b0;
end 
// data3[ 14 ]
initial
begin
	data3[14] = 1'b0;
end 
// data3[ 13 ]
initial
begin
	data3[13] = 1'b0;
end 
// data3[ 12 ]
initial
begin
	data3[12] = 1'b0;
end 
// data3[ 11 ]
initial
begin
	data3[11] = 1'b0;
end 
// data3[ 10 ]
initial
begin
	data3[10] = 1'b0;
end 
// data3[ 9 ]
initial
begin
	data3[9] = 1'b0;
end 
// data3[ 8 ]
initial
begin
	data3[8] = 1'b0;
end 
// data3[ 7 ]
initial
begin
	data3[7] = 1'b0;
end 
// data3[ 6 ]
initial
begin
	data3[6] = 1'b0;
end 
// data3[ 5 ]
initial
begin
	data3[5] = 1'b0;
end 
// data3[ 4 ]
initial
begin
	data3[4] = 1'b1;
	data3[4] = #280000 1'b0;
end 
// data3[ 3 ]
initial
begin
	data3[3] = 1'b1;
	data3[3] = #280000 1'b0;
end 
// data3[ 2 ]
initial
begin
	data3[2] = 1'b0;
end 
// data3[ 1 ]
initial
begin
	data3[1] = 1'b0;
end 
// data3[ 0 ]
initial
begin
	data3[0] = 1'b1;
	data3[0] = #280000 1'b0;
end 
// sel[ 1 ]
initial
begin
	sel[1] = 1'b0;
	sel[1] = #110000 1'b1;
	sel[1] = #170000 1'b0;
end 
// sel[ 0 ]
initial
begin
	sel[0] = 1'b0;
	sel[0] = #20000 1'b1;
	sel[0] = #90000 1'b0;
	sel[0] = #80000 1'b1;
	sel[0] = #90000 1'b0;
end 

mux_4_vlg_sample_tst tb_sample (
	.data0(data0),
	.data1(data1),
	.data2(data2),
	.data3(data3),
	.sel(sel),
	.sampler_tx(sampler)
);

mux_4_vlg_check_tst tb_out(
	.mux_output(mux_output),
	.sampler_rx(sampler)
);
endmodule

