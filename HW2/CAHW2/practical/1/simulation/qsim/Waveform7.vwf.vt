// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/05/2024 16:54:46"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    mux_8
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module mux_8_vlg_sample_tst(
	data0,
	data1,
	data2,
	data3,
	data4,
	data5,
	data6,
	data7,
	sel,
	sampler_tx
);
input [7:0] data0;
input [7:0] data1;
input [7:0] data2;
input [7:0] data3;
input [7:0] data4;
input [7:0] data5;
input [7:0] data6;
input [7:0] data7;
input [2:0] sel;
output sampler_tx;

reg sample;
time current_time;
always @(data0 or data1 or data2 or data3 or data4 or data5 or data6 or data7 or sel)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module mux_8_vlg_check_tst (
	mux_output,
	sampler_rx
);
input [7:0] mux_output;
input sampler_rx;

reg [7:0] mux_output_expected;

reg [7:0] mux_output_prev;

reg [7:0] mux_output_expected_prev;

reg [7:0] last_mux_output_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	mux_output_prev = mux_output;
end

// update expected /o prevs

always @(trigger)
begin
	mux_output_expected_prev = mux_output_expected;
end


// expected mux_output[ 7 ]
initial
begin
	mux_output_expected[7] = 1'bX;
end 
// expected mux_output[ 6 ]
initial
begin
	mux_output_expected[6] = 1'bX;
end 
// expected mux_output[ 5 ]
initial
begin
	mux_output_expected[5] = 1'bX;
end 
// expected mux_output[ 4 ]
initial
begin
	mux_output_expected[4] = 1'bX;
end 
// expected mux_output[ 3 ]
initial
begin
	mux_output_expected[3] = 1'bX;
end 
// expected mux_output[ 2 ]
initial
begin
	mux_output_expected[2] = 1'bX;
end 
// expected mux_output[ 1 ]
initial
begin
	mux_output_expected[1] = 1'bX;
end 
// expected mux_output[ 0 ]
initial
begin
	mux_output_expected[0] = 1'bX;
end 
// generate trigger
always @(mux_output_expected or mux_output)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected mux_output = %b | ",mux_output_expected_prev);
	$display("| real mux_output = %b | ",mux_output_prev);
`endif
	if (
		( mux_output_expected_prev[0] !== 1'bx ) && ( mux_output_prev[0] !== mux_output_expected_prev[0] )
		&& ((mux_output_expected_prev[0] !== last_mux_output_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mux_output[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mux_output_expected_prev);
		$display ("     Real value = %b", mux_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mux_output_exp[0] = mux_output_expected_prev[0];
	end
	if (
		( mux_output_expected_prev[1] !== 1'bx ) && ( mux_output_prev[1] !== mux_output_expected_prev[1] )
		&& ((mux_output_expected_prev[1] !== last_mux_output_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mux_output[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mux_output_expected_prev);
		$display ("     Real value = %b", mux_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mux_output_exp[1] = mux_output_expected_prev[1];
	end
	if (
		( mux_output_expected_prev[2] !== 1'bx ) && ( mux_output_prev[2] !== mux_output_expected_prev[2] )
		&& ((mux_output_expected_prev[2] !== last_mux_output_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mux_output[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mux_output_expected_prev);
		$display ("     Real value = %b", mux_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mux_output_exp[2] = mux_output_expected_prev[2];
	end
	if (
		( mux_output_expected_prev[3] !== 1'bx ) && ( mux_output_prev[3] !== mux_output_expected_prev[3] )
		&& ((mux_output_expected_prev[3] !== last_mux_output_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mux_output[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mux_output_expected_prev);
		$display ("     Real value = %b", mux_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mux_output_exp[3] = mux_output_expected_prev[3];
	end
	if (
		( mux_output_expected_prev[4] !== 1'bx ) && ( mux_output_prev[4] !== mux_output_expected_prev[4] )
		&& ((mux_output_expected_prev[4] !== last_mux_output_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mux_output[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mux_output_expected_prev);
		$display ("     Real value = %b", mux_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mux_output_exp[4] = mux_output_expected_prev[4];
	end
	if (
		( mux_output_expected_prev[5] !== 1'bx ) && ( mux_output_prev[5] !== mux_output_expected_prev[5] )
		&& ((mux_output_expected_prev[5] !== last_mux_output_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mux_output[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mux_output_expected_prev);
		$display ("     Real value = %b", mux_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mux_output_exp[5] = mux_output_expected_prev[5];
	end
	if (
		( mux_output_expected_prev[6] !== 1'bx ) && ( mux_output_prev[6] !== mux_output_expected_prev[6] )
		&& ((mux_output_expected_prev[6] !== last_mux_output_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mux_output[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mux_output_expected_prev);
		$display ("     Real value = %b", mux_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mux_output_exp[6] = mux_output_expected_prev[6];
	end
	if (
		( mux_output_expected_prev[7] !== 1'bx ) && ( mux_output_prev[7] !== mux_output_expected_prev[7] )
		&& ((mux_output_expected_prev[7] !== last_mux_output_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mux_output[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mux_output_expected_prev);
		$display ("     Real value = %b", mux_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mux_output_exp[7] = mux_output_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module mux_8_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] data0;
reg [7:0] data1;
reg [7:0] data2;
reg [7:0] data3;
reg [7:0] data4;
reg [7:0] data5;
reg [7:0] data6;
reg [7:0] data7;
reg [2:0] sel;
// wires                                               
wire [7:0] mux_output;

wire sampler;                             

// assign statements (if any)                          
mux_8 i1 (
// port map - connection between master ports and signals/registers   
	.data0(data0),
	.data1(data1),
	.data2(data2),
	.data3(data3),
	.data4(data4),
	.data5(data5),
	.data6(data6),
	.data7(data7),
	.mux_output(mux_output),
	.sel(sel)
);
// data0[ 7 ]
initial
begin
	data0[7] = 1'b0;
end 
// data0[ 6 ]
initial
begin
	data0[6] = 1'b1;
end 
// data0[ 5 ]
initial
begin
	data0[5] = 1'b0;
end 
// data0[ 4 ]
initial
begin
	data0[4] = 1'b0;
end 
// data0[ 3 ]
initial
begin
	data0[3] = 1'b0;
end 
// data0[ 2 ]
initial
begin
	data0[2] = 1'b0;
end 
// data0[ 1 ]
initial
begin
	data0[1] = 1'b1;
end 
// data0[ 0 ]
initial
begin
	data0[0] = 1'b1;
end 
// data1[ 7 ]
initial
begin
	data1[7] = 1'b1;
end 
// data1[ 6 ]
initial
begin
	data1[6] = 1'b1;
end 
// data1[ 5 ]
initial
begin
	data1[5] = 1'b1;
end 
// data1[ 4 ]
initial
begin
	data1[4] = 1'b0;
end 
// data1[ 3 ]
initial
begin
	data1[3] = 1'b1;
end 
// data1[ 2 ]
initial
begin
	data1[2] = 1'b1;
end 
// data1[ 1 ]
initial
begin
	data1[1] = 1'b0;
end 
// data1[ 0 ]
initial
begin
	data1[0] = 1'b0;
end 
// data2[ 7 ]
initial
begin
	data2[7] = 1'b1;
end 
// data2[ 6 ]
initial
begin
	data2[6] = 1'b0;
end 
// data2[ 5 ]
initial
begin
	data2[5] = 1'b1;
end 
// data2[ 4 ]
initial
begin
	data2[4] = 1'b0;
end 
// data2[ 3 ]
initial
begin
	data2[3] = 1'b0;
end 
// data2[ 2 ]
initial
begin
	data2[2] = 1'b0;
end 
// data2[ 1 ]
initial
begin
	data2[1] = 1'b0;
end 
// data2[ 0 ]
initial
begin
	data2[0] = 1'b0;
end 
// data3[ 7 ]
initial
begin
	data3[7] = 1'b1;
end 
// data3[ 6 ]
initial
begin
	data3[6] = 1'b1;
end 
// data3[ 5 ]
initial
begin
	data3[5] = 1'b1;
end 
// data3[ 4 ]
initial
begin
	data3[4] = 1'b0;
end 
// data3[ 3 ]
initial
begin
	data3[3] = 1'b0;
end 
// data3[ 2 ]
initial
begin
	data3[2] = 1'b1;
end 
// data3[ 1 ]
initial
begin
	data3[1] = 1'b0;
end 
// data3[ 0 ]
initial
begin
	data3[0] = 1'b1;
end 
// data4[ 7 ]
initial
begin
	data4[7] = 1'b1;
end 
// data4[ 6 ]
initial
begin
	data4[6] = 1'b1;
end 
// data4[ 5 ]
initial
begin
	data4[5] = 1'b1;
end 
// data4[ 4 ]
initial
begin
	data4[4] = 1'b0;
end 
// data4[ 3 ]
initial
begin
	data4[3] = 1'b1;
end 
// data4[ 2 ]
initial
begin
	data4[2] = 1'b1;
end 
// data4[ 1 ]
initial
begin
	data4[1] = 1'b0;
end 
// data4[ 0 ]
initial
begin
	data4[0] = 1'b0;
end 
// data5[ 7 ]
initial
begin
	data5[7] = 1'b0;
end 
// data5[ 6 ]
initial
begin
	data5[6] = 1'b1;
end 
// data5[ 5 ]
initial
begin
	data5[5] = 1'b1;
end 
// data5[ 4 ]
initial
begin
	data5[4] = 1'b0;
end 
// data5[ 3 ]
initial
begin
	data5[3] = 1'b0;
end 
// data5[ 2 ]
initial
begin
	data5[2] = 1'b0;
end 
// data5[ 1 ]
initial
begin
	data5[1] = 1'b1;
end 
// data5[ 0 ]
initial
begin
	data5[0] = 1'b1;
end 
// data6[ 7 ]
initial
begin
	data6[7] = 1'b0;
end 
// data6[ 6 ]
initial
begin
	data6[6] = 1'b0;
end 
// data6[ 5 ]
initial
begin
	data6[5] = 1'b0;
end 
// data6[ 4 ]
initial
begin
	data6[4] = 1'b1;
end 
// data6[ 3 ]
initial
begin
	data6[3] = 1'b1;
end 
// data6[ 2 ]
initial
begin
	data6[2] = 1'b1;
end 
// data6[ 1 ]
initial
begin
	data6[1] = 1'b0;
end 
// data6[ 0 ]
initial
begin
	data6[0] = 1'b1;
end 
// data7[ 7 ]
initial
begin
	data7[7] = 1'b1;
end 
// data7[ 6 ]
initial
begin
	data7[6] = 1'b1;
end 
// data7[ 5 ]
initial
begin
	data7[5] = 1'b0;
end 
// data7[ 4 ]
initial
begin
	data7[4] = 1'b0;
end 
// data7[ 3 ]
initial
begin
	data7[3] = 1'b0;
end 
// data7[ 2 ]
initial
begin
	data7[2] = 1'b0;
end 
// data7[ 1 ]
initial
begin
	data7[1] = 1'b1;
end 
// data7[ 0 ]
initial
begin
	data7[0] = 1'b1;
end 
// sel[ 2 ]
initial
begin
	sel[2] = 1'b1;
	sel[2] = #50000 1'b0;
	sel[2] = #50000 1'b1;
	sel[2] = #50000 1'b0;
	sel[2] = #100000 1'b1;
	sel[2] = #50000 1'b0;
	sel[2] = #100000 1'b1;
	sel[2] = #50000 1'b0;
	sel[2] = #50000 1'b1;
	sel[2] = #20000 1'b0;
end 
// sel[ 1 ]
initial
begin
	sel[1] = 1'b0;
	sel[1] = #50000 1'b1;
	sel[1] = #50000 1'b0;
	sel[1] = #50000 1'b1;
	sel[1] = #250000 1'b0;
	sel[1] = #100000 1'b1;
	sel[1] = #20000 1'b0;
end 
// sel[ 0 ]
initial
begin
	sel[0] = 1'b1;
	sel[0] = #50000 1'b0;
	sel[0] = #100000 1'b1;
	sel[0] = #100000 1'b0;
	sel[0] = #100000 1'b1;
	sel[0] = #100000 1'b0;
end 

mux_8_vlg_sample_tst tb_sample (
	.data0(data0),
	.data1(data1),
	.data2(data2),
	.data3(data3),
	.data4(data4),
	.data5(data5),
	.data6(data6),
	.data7(data7),
	.sel(sel),
	.sampler_tx(sampler)
);

mux_8_vlg_check_tst tb_out(
	.mux_output(mux_output),
	.sampler_rx(sampler)
);
endmodule

