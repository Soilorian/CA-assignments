// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/06/2024 21:46:15"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    mux4to1_16bit
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module mux4to1_16bit_vlg_sample_tst(
	input0,
	input1,
	input2,
	input3,
	sel,
	sampler_tx
);
input [0:15] input0;
input [0:15] input1;
input [0:15] input2;
input [0:15] input3;
input [0:1] sel;
output sampler_tx;

reg sample;
time current_time;
always @(input0 or input1 or input2 or input3 or sel)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module mux4to1_16bit_vlg_check_tst (
	res,
	sampler_rx
);
input [0:15] res;
input sampler_rx;

reg [0:15] res_expected;

reg [0:15] res_prev;

reg [0:15] res_expected_prev;

reg [0:15] last_res_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	res_prev = res;
end

// update expected /o prevs

always @(trigger)
begin
	res_expected_prev = res_expected;
end


// expected res[ 15 ]
initial
begin
	res_expected[15] = 1'bX;
end 
// expected res[ 14 ]
initial
begin
	res_expected[14] = 1'bX;
end 
// expected res[ 13 ]
initial
begin
	res_expected[13] = 1'bX;
end 
// expected res[ 12 ]
initial
begin
	res_expected[12] = 1'bX;
end 
// expected res[ 11 ]
initial
begin
	res_expected[11] = 1'bX;
end 
// expected res[ 10 ]
initial
begin
	res_expected[10] = 1'bX;
end 
// expected res[ 9 ]
initial
begin
	res_expected[9] = 1'bX;
end 
// expected res[ 8 ]
initial
begin
	res_expected[8] = 1'bX;
end 
// expected res[ 7 ]
initial
begin
	res_expected[7] = 1'bX;
end 
// expected res[ 6 ]
initial
begin
	res_expected[6] = 1'bX;
end 
// expected res[ 5 ]
initial
begin
	res_expected[5] = 1'bX;
end 
// expected res[ 4 ]
initial
begin
	res_expected[4] = 1'bX;
end 
// expected res[ 3 ]
initial
begin
	res_expected[3] = 1'bX;
end 
// expected res[ 2 ]
initial
begin
	res_expected[2] = 1'bX;
end 
// expected res[ 1 ]
initial
begin
	res_expected[1] = 1'bX;
end 
// expected res[ 0 ]
initial
begin
	res_expected[0] = 1'bX;
end 
// generate trigger
always @(res_expected or res)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected res = %b | ",res_expected_prev);
	$display("| real res = %b | ",res_prev);
`endif
	if (
		( res_expected_prev[0] !== 1'bx ) && ( res_prev[0] !== res_expected_prev[0] )
		&& ((res_expected_prev[0] !== last_res_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_expected_prev);
		$display ("     Real value = %b", res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_res_exp[0] = res_expected_prev[0];
	end
	if (
		( res_expected_prev[1] !== 1'bx ) && ( res_prev[1] !== res_expected_prev[1] )
		&& ((res_expected_prev[1] !== last_res_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_expected_prev);
		$display ("     Real value = %b", res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_res_exp[1] = res_expected_prev[1];
	end
	if (
		( res_expected_prev[2] !== 1'bx ) && ( res_prev[2] !== res_expected_prev[2] )
		&& ((res_expected_prev[2] !== last_res_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_expected_prev);
		$display ("     Real value = %b", res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_res_exp[2] = res_expected_prev[2];
	end
	if (
		( res_expected_prev[3] !== 1'bx ) && ( res_prev[3] !== res_expected_prev[3] )
		&& ((res_expected_prev[3] !== last_res_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_expected_prev);
		$display ("     Real value = %b", res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_res_exp[3] = res_expected_prev[3];
	end
	if (
		( res_expected_prev[4] !== 1'bx ) && ( res_prev[4] !== res_expected_prev[4] )
		&& ((res_expected_prev[4] !== last_res_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_expected_prev);
		$display ("     Real value = %b", res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_res_exp[4] = res_expected_prev[4];
	end
	if (
		( res_expected_prev[5] !== 1'bx ) && ( res_prev[5] !== res_expected_prev[5] )
		&& ((res_expected_prev[5] !== last_res_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_expected_prev);
		$display ("     Real value = %b", res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_res_exp[5] = res_expected_prev[5];
	end
	if (
		( res_expected_prev[6] !== 1'bx ) && ( res_prev[6] !== res_expected_prev[6] )
		&& ((res_expected_prev[6] !== last_res_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_expected_prev);
		$display ("     Real value = %b", res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_res_exp[6] = res_expected_prev[6];
	end
	if (
		( res_expected_prev[7] !== 1'bx ) && ( res_prev[7] !== res_expected_prev[7] )
		&& ((res_expected_prev[7] !== last_res_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_expected_prev);
		$display ("     Real value = %b", res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_res_exp[7] = res_expected_prev[7];
	end
	if (
		( res_expected_prev[8] !== 1'bx ) && ( res_prev[8] !== res_expected_prev[8] )
		&& ((res_expected_prev[8] !== last_res_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_expected_prev);
		$display ("     Real value = %b", res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_res_exp[8] = res_expected_prev[8];
	end
	if (
		( res_expected_prev[9] !== 1'bx ) && ( res_prev[9] !== res_expected_prev[9] )
		&& ((res_expected_prev[9] !== last_res_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_expected_prev);
		$display ("     Real value = %b", res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_res_exp[9] = res_expected_prev[9];
	end
	if (
		( res_expected_prev[10] !== 1'bx ) && ( res_prev[10] !== res_expected_prev[10] )
		&& ((res_expected_prev[10] !== last_res_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_expected_prev);
		$display ("     Real value = %b", res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_res_exp[10] = res_expected_prev[10];
	end
	if (
		( res_expected_prev[11] !== 1'bx ) && ( res_prev[11] !== res_expected_prev[11] )
		&& ((res_expected_prev[11] !== last_res_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_expected_prev);
		$display ("     Real value = %b", res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_res_exp[11] = res_expected_prev[11];
	end
	if (
		( res_expected_prev[12] !== 1'bx ) && ( res_prev[12] !== res_expected_prev[12] )
		&& ((res_expected_prev[12] !== last_res_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_expected_prev);
		$display ("     Real value = %b", res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_res_exp[12] = res_expected_prev[12];
	end
	if (
		( res_expected_prev[13] !== 1'bx ) && ( res_prev[13] !== res_expected_prev[13] )
		&& ((res_expected_prev[13] !== last_res_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_expected_prev);
		$display ("     Real value = %b", res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_res_exp[13] = res_expected_prev[13];
	end
	if (
		( res_expected_prev[14] !== 1'bx ) && ( res_prev[14] !== res_expected_prev[14] )
		&& ((res_expected_prev[14] !== last_res_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_expected_prev);
		$display ("     Real value = %b", res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_res_exp[14] = res_expected_prev[14];
	end
	if (
		( res_expected_prev[15] !== 1'bx ) && ( res_prev[15] !== res_expected_prev[15] )
		&& ((res_expected_prev[15] !== last_res_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_expected_prev);
		$display ("     Real value = %b", res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_res_exp[15] = res_expected_prev[15];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module mux4to1_16bit_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [0:15] input0;
reg [0:15] input1;
reg [0:15] input2;
reg [0:15] input3;
reg [0:1] sel;
// wires                                               
wire [0:15] res;

wire sampler;                             

// assign statements (if any)                          
mux4to1_16bit i1 (
// port map - connection between master ports and signals/registers   
	.input0(input0),
	.input1(input1),
	.input2(input2),
	.input3(input3),
	.res(res),
	.sel(sel)
);
// input0[ 15 ]
initial
begin
	input0[15] = 1'b0;
	input0[15] = #30000 1'b1;
	input0[15] = #20000 1'b0;
	input0[15] = #20000 1'b1;
	input0[15] = #20000 1'b0;
	input0[15] = #20000 1'b1;
	input0[15] = #40000 1'b0;
	input0[15] = #20000 1'b1;
	input0[15] = #40000 1'b0;
	input0[15] = #20000 1'b1;
	input0[15] = #20000 1'b0;
	input0[15] = #40000 1'b1;
	input0[15] = #20000 1'b0;
	input0[15] = #40000 1'b1;
	input0[15] = #120000 1'b0;
	input0[15] = #20000 1'b1;
	input0[15] = #80000 1'b0;
	input0[15] = #20000 1'b1;
	input0[15] = #40000 1'b0;
end 
// input0[ 14 ]
initial
begin
	input0[14] = 1'b0;
	input0[14] = #30000 1'b1;
	input0[14] = #100000 1'b0;
	input0[14] = #60000 1'b1;
	input0[14] = #20000 1'b0;
	input0[14] = #80000 1'b1;
	input0[14] = #20000 1'b0;
	input0[14] = #60000 1'b1;
	input0[14] = #20000 1'b0;
	input0[14] = #20000 1'b1;
	input0[14] = #20000 1'b0;
	input0[14] = #20000 1'b1;
	input0[14] = #40000 1'b0;
	input0[14] = #80000 1'b1;
	input0[14] = #20000 1'b0;
	input0[14] = #20000 1'b1;
	input0[14] = #80000 1'b0;
end 
// input0[ 13 ]
initial
begin
	input0[13] = 1'b0;
	input0[13] = #30000 1'b1;
	input0[13] = #20000 1'b0;
	input0[13] = #60000 1'b1;
	input0[13] = #40000 1'b0;
	input0[13] = #60000 1'b1;
	input0[13] = #60000 1'b0;
	input0[13] = #20000 1'b1;
	input0[13] = #60000 1'b0;
	input0[13] = #20000 1'b1;
	input0[13] = #20000 1'b0;
	input0[13] = #160000 1'b1;
	input0[13] = #20000 1'b0;
	input0[13] = #20000 1'b1;
	input0[13] = #20000 1'b0;
	input0[13] = #40000 1'b1;
	input0[13] = #20000 1'b0;
end 
// input0[ 12 ]
initial
begin
	input0[12] = 1'b0;
	input0[12] = #70000 1'b1;
	input0[12] = #60000 1'b0;
	input0[12] = #60000 1'b1;
	input0[12] = #60000 1'b0;
	input0[12] = #40000 1'b1;
	input0[12] = #40000 1'b0;
	input0[12] = #40000 1'b1;
	input0[12] = #20000 1'b0;
	input0[12] = #40000 1'b1;
	input0[12] = #20000 1'b0;
	input0[12] = #20000 1'b1;
	input0[12] = #40000 1'b0;
	input0[12] = #80000 1'b1;
	input0[12] = #20000 1'b0;
	input0[12] = #60000 1'b1;
	input0[12] = #20000 1'b0;
end 
// input0[ 11 ]
initial
begin
	input0[11] = 1'b0;
	input0[11] = #70000 1'b1;
	input0[11] = #20000 1'b0;
	input0[11] = #20000 1'b1;
	input0[11] = #80000 1'b0;
	input0[11] = #60000 1'b1;
	input0[11] = #60000 1'b0;
	input0[11] = #60000 1'b1;
	input0[11] = #20000 1'b0;
	input0[11] = #40000 1'b1;
	input0[11] = #80000 1'b0;
	input0[11] = #20000 1'b1;
	input0[11] = #140000 1'b0;
	input0[11] = #20000 1'b1;
	input0[11] = #10000 1'b0;
end 
// input0[ 10 ]
initial
begin
	input0[10] = 1'b0;
	input0[10] = #30000 1'b1;
	input0[10] = #100000 1'b0;
	input0[10] = #20000 1'b1;
	input0[10] = #40000 1'b0;
	input0[10] = #20000 1'b1;
	input0[10] = #20000 1'b0;
	input0[10] = #20000 1'b1;
	input0[10] = #80000 1'b0;
	input0[10] = #40000 1'b1;
	input0[10] = #20000 1'b0;
	input0[10] = #20000 1'b1;
	input0[10] = #20000 1'b0;
	input0[10] = #20000 1'b1;
	input0[10] = #60000 1'b0;
	input0[10] = #100000 1'b1;
	input0[10] = #40000 1'b0;
	input0[10] = #20000 1'b1;
	input0[10] = #30000 1'b0;
end 
// input0[ 9 ]
initial
begin
	input0[9] = 1'b0;
	input0[9] = #90000 1'b1;
	input0[9] = #20000 1'b0;
	input0[9] = #20000 1'b1;
	input0[9] = #20000 1'b0;
	input0[9] = #20000 1'b1;
	input0[9] = #20000 1'b0;
	input0[9] = #80000 1'b1;
	input0[9] = #20000 1'b0;
	input0[9] = #20000 1'b1;
	input0[9] = #60000 1'b0;
	input0[9] = #80000 1'b1;
	input0[9] = #20000 1'b0;
	input0[9] = #40000 1'b1;
	input0[9] = #20000 1'b0;
	input0[9] = #20000 1'b1;
	input0[9] = #20000 1'b0;
	input0[9] = #60000 1'b1;
	input0[9] = #20000 1'b0;
	input0[9] = #20000 1'b1;
	input0[9] = #30000 1'b0;
end 
// input0[ 8 ]
initial
begin
	input0[8] = 1'b0;
	input0[8] = #30000 1'b1;
	input0[8] = #20000 1'b0;
	input0[8] = #40000 1'b1;
	input0[8] = #140000 1'b0;
	input0[8] = #100000 1'b1;
	input0[8] = #20000 1'b0;
	input0[8] = #40000 1'b1;
	input0[8] = #40000 1'b0;
	input0[8] = #20000 1'b1;
	input0[8] = #20000 1'b0;
	input0[8] = #40000 1'b1;
	input0[8] = #20000 1'b0;
	input0[8] = #60000 1'b1;
	input0[8] = #20000 1'b0;
	input0[8] = #40000 1'b1;
	input0[8] = #20000 1'b0;
	input0[8] = #20000 1'b1;
	input0[8] = #10000 1'b0;
end 
// input0[ 7 ]
initial
begin
	input0[7] = 1'b0;
	input0[7] = #90000 1'b1;
	input0[7] = #40000 1'b0;
	input0[7] = #20000 1'b1;
	input0[7] = #20000 1'b0;
	input0[7] = #100000 1'b1;
	input0[7] = #80000 1'b0;
	input0[7] = #40000 1'b1;
	input0[7] = #20000 1'b0;
	input0[7] = #40000 1'b1;
	input0[7] = #20000 1'b0;
	input0[7] = #20000 1'b1;
	input0[7] = #140000 1'b0;
	input0[7] = #20000 1'b1;
	input0[7] = #20000 1'b0;
end 
// input0[ 6 ]
initial
begin
	input0[6] = 1'b0;
	input0[6] = #30000 1'b1;
	input0[6] = #20000 1'b0;
	input0[6] = #60000 1'b1;
	input0[6] = #40000 1'b0;
	input0[6] = #20000 1'b1;
	input0[6] = #60000 1'b0;
	input0[6] = #60000 1'b1;
	input0[6] = #20000 1'b0;
	input0[6] = #20000 1'b1;
	input0[6] = #20000 1'b0;
	input0[6] = #40000 1'b1;
	input0[6] = #20000 1'b0;
	input0[6] = #20000 1'b1;
	input0[6] = #20000 1'b0;
	input0[6] = #20000 1'b1;
	input0[6] = #20000 1'b0;
	input0[6] = #20000 1'b1;
	input0[6] = #60000 1'b0;
	input0[6] = #40000 1'b1;
	input0[6] = #20000 1'b0;
	input0[6] = #20000 1'b1;
	input0[6] = #40000 1'b0;
end 
// input0[ 5 ]
initial
begin
	input0[5] = 1'b0;
	input0[5] = #50000 1'b1;
	input0[5] = #100000 1'b0;
	input0[5] = #60000 1'b1;
	input0[5] = #40000 1'b0;
	input0[5] = #40000 1'b1;
	input0[5] = #80000 1'b0;
	input0[5] = #20000 1'b1;
	input0[5] = #40000 1'b0;
	input0[5] = #40000 1'b1;
	input0[5] = #20000 1'b0;
	input0[5] = #40000 1'b1;
	input0[5] = #20000 1'b0;
	input0[5] = #20000 1'b1;
	input0[5] = #40000 1'b0;
	input0[5] = #40000 1'b1;
	input0[5] = #50000 1'b0;
end 
// input0[ 4 ]
initial
begin
	input0[4] = 1'b0;
	input0[4] = #50000 1'b1;
	input0[4] = #20000 1'b0;
	input0[4] = #80000 1'b1;
	input0[4] = #40000 1'b0;
	input0[4] = #20000 1'b1;
	input0[4] = #20000 1'b0;
	input0[4] = #20000 1'b1;
	input0[4] = #20000 1'b0;
	input0[4] = #40000 1'b1;
	input0[4] = #40000 1'b0;
	input0[4] = #20000 1'b1;
	input0[4] = #40000 1'b0;
	input0[4] = #20000 1'b1;
	input0[4] = #40000 1'b0;
	input0[4] = #20000 1'b1;
	input0[4] = #20000 1'b0;
	input0[4] = #40000 1'b1;
	input0[4] = #80000 1'b0;
	input0[4] = #60000 1'b1;
	input0[4] = #10000 1'b0;
end 
// input0[ 3 ]
initial
begin
	input0[3] = 1'b0;
	input0[3] = #50000 1'b1;
	input0[3] = #100000 1'b0;
	input0[3] = #80000 1'b1;
	input0[3] = #20000 1'b0;
	input0[3] = #60000 1'b1;
	input0[3] = #40000 1'b0;
	input0[3] = #40000 1'b1;
	input0[3] = #20000 1'b0;
	input0[3] = #60000 1'b1;
	input0[3] = #20000 1'b0;
	input0[3] = #40000 1'b1;
	input0[3] = #40000 1'b0;
	input0[3] = #40000 1'b1;
	input0[3] = #20000 1'b0;
	input0[3] = #60000 1'b1;
	input0[3] = #10000 1'b0;
end 
// input0[ 2 ]
initial
begin
	input0[2] = 1'b0;
	input0[2] = #70000 1'b1;
	input0[2] = #20000 1'b0;
	input0[2] = #40000 1'b1;
	input0[2] = #60000 1'b0;
	input0[2] = #100000 1'b1;
	input0[2] = #60000 1'b0;
	input0[2] = #20000 1'b1;
	input0[2] = #20000 1'b0;
	input0[2] = #20000 1'b1;
	input0[2] = #20000 1'b0;
	input0[2] = #20000 1'b1;
	input0[2] = #20000 1'b0;
	input0[2] = #20000 1'b1;
	input0[2] = #20000 1'b0;
	input0[2] = #20000 1'b1;
	input0[2] = #40000 1'b0;
	input0[2] = #20000 1'b1;
	input0[2] = #20000 1'b0;
	input0[2] = #20000 1'b1;
	input0[2] = #40000 1'b0;
	input0[2] = #20000 1'b1;
	input0[2] = #10000 1'b0;
end 
// input0[ 1 ]
initial
begin
	input0[1] = 1'b0;
	input0[1] = #50000 1'b1;
	input0[1] = #20000 1'b0;
	input0[1] = #40000 1'b1;
	input0[1] = #20000 1'b0;
	input0[1] = #20000 1'b1;
	input0[1] = #60000 1'b0;
	input0[1] = #40000 1'b1;
	input0[1] = #40000 1'b0;
	input0[1] = #20000 1'b1;
	input0[1] = #20000 1'b0;
	input0[1] = #20000 1'b1;
	input0[1] = #40000 1'b0;
	input0[1] = #20000 1'b1;
	input0[1] = #20000 1'b0;
	input0[1] = #40000 1'b1;
	input0[1] = #120000 1'b0;
	input0[1] = #40000 1'b1;
	input0[1] = #20000 1'b0;
	input0[1] = #40000 1'b1;
	input0[1] = #10000 1'b0;
end 
// input0[ 0 ]
initial
begin
	input0[0] = 1'b0;
	input0[0] = #30000 1'b1;
	input0[0] = #40000 1'b0;
	input0[0] = #40000 1'b1;
	input0[0] = #80000 1'b0;
	input0[0] = #20000 1'b1;
	input0[0] = #20000 1'b0;
	input0[0] = #40000 1'b1;
	input0[0] = #80000 1'b0;
	input0[0] = #40000 1'b1;
	input0[0] = #40000 1'b0;
	input0[0] = #40000 1'b1;
	input0[0] = #20000 1'b0;
	input0[0] = #20000 1'b1;
	input0[0] = #40000 1'b0;
	input0[0] = #40000 1'b1;
	input0[0] = #60000 1'b0;
end 
// input1[ 15 ]
initial
begin
	input1[15] = 1'b0;
	input1[15] = #30000 1'b1;
	input1[15] = #150000 1'b0;
	input1[15] = #100000 1'b1;
	input1[15] = #200000 1'b0;
	input1[15] = #50000 1'b1;
	input1[15] = #100000 1'b0;
	input1[15] = #50000 1'b1;
	input1[15] = #20000 1'b0;
end 
// input1[ 14 ]
initial
begin
	input1[14] = 1'b0;
	input1[14] = #30000 1'b1;
	input1[14] = #100000 1'b0;
	input1[14] = #200000 1'b1;
	input1[14] = #50000 1'b0;
	input1[14] = #50000 1'b1;
	input1[14] = #100000 1'b0;
	input1[14] = #150000 1'b1;
	input1[14] = #20000 1'b0;
end 
// input1[ 13 ]
initial
begin
	input1[13] = 1'b0;
	input1[13] = #30000 1'b1;
	input1[13] = #50000 1'b0;
	input1[13] = #50000 1'b1;
	input1[13] = #150000 1'b0;
	input1[13] = #50000 1'b1;
	input1[13] = #50000 1'b0;
	input1[13] = #150000 1'b1;
	input1[13] = #150000 1'b0;
end 
// input1[ 12 ]
initial
begin
	input1[12] = 1'b0;
	input1[12] = #30000 1'b1;
	input1[12] = #250000 1'b0;
	input1[12] = #50000 1'b1;
	input1[12] = #50000 1'b0;
	input1[12] = #50000 1'b1;
	input1[12] = #100000 1'b0;
	input1[12] = #50000 1'b1;
	input1[12] = #120000 1'b0;
end 
// input1[ 11 ]
initial
begin
	input1[11] = 1'b0;
	input1[11] = #80000 1'b1;
	input1[11] = #100000 1'b0;
	input1[11] = #50000 1'b1;
	input1[11] = #50000 1'b0;
	input1[11] = #150000 1'b1;
	input1[11] = #200000 1'b0;
	input1[11] = #50000 1'b1;
	input1[11] = #20000 1'b0;
end 
// input1[ 10 ]
initial
begin
	input1[10] = 1'b0;
	input1[10] = #130000 1'b1;
	input1[10] = #100000 1'b0;
	input1[10] = #100000 1'b1;
	input1[10] = #50000 1'b0;
	input1[10] = #50000 1'b1;
	input1[10] = #100000 1'b0;
	input1[10] = #50000 1'b1;
	input1[10] = #50000 1'b0;
	input1[10] = #50000 1'b1;
	input1[10] = #20000 1'b0;
end 
// input1[ 9 ]
initial
begin
	input1[9] = 1'b0;
	input1[9] = #130000 1'b1;
	input1[9] = #150000 1'b0;
	input1[9] = #50000 1'b1;
	input1[9] = #50000 1'b0;
	input1[9] = #50000 1'b1;
	input1[9] = #50000 1'b0;
	input1[9] = #50000 1'b1;
	input1[9] = #50000 1'b0;
end 
// input1[ 8 ]
initial
begin
	input1[8] = 1'b0;
	input1[8] = #130000 1'b1;
	input1[8] = #50000 1'b0;
	input1[8] = #150000 1'b1;
	input1[8] = #100000 1'b0;
	input1[8] = #100000 1'b1;
	input1[8] = #50000 1'b0;
	input1[8] = #100000 1'b1;
	input1[8] = #20000 1'b0;
end 
// input1[ 7 ]
initial
begin
	input1[7] = 1'b0;
	input1[7] = #80000 1'b1;
	input1[7] = #50000 1'b0;
	input1[7] = #50000 1'b1;
	input1[7] = #50000 1'b0;
	input1[7] = #100000 1'b1;
	input1[7] = #50000 1'b0;
	input1[7] = #100000 1'b1;
	input1[7] = #200000 1'b0;
end 
// input1[ 6 ]
initial
begin
	input1[6] = 1'b0;
	input1[6] = #80000 1'b1;
	input1[6] = #100000 1'b0;
	input1[6] = #100000 1'b1;
	input1[6] = #100000 1'b0;
	input1[6] = #200000 1'b1;
	input1[6] = #50000 1'b0;
	input1[6] = #50000 1'b1;
	input1[6] = #20000 1'b0;
end 
// input1[ 5 ]
initial
begin
	input1[5] = 1'b0;
	input1[5] = #80000 1'b1;
	input1[5] = #50000 1'b0;
	input1[5] = #150000 1'b1;
	input1[5] = #50000 1'b0;
	input1[5] = #50000 1'b1;
	input1[5] = #150000 1'b0;
	input1[5] = #100000 1'b1;
	input1[5] = #70000 1'b0;
end 
// input1[ 4 ]
initial
begin
	input1[4] = 1'b0;
	input1[4] = #30000 1'b1;
	input1[4] = #50000 1'b0;
	input1[4] = #50000 1'b1;
	input1[4] = #100000 1'b0;
	input1[4] = #100000 1'b1;
	input1[4] = #150000 1'b0;
	input1[4] = #50000 1'b1;
	input1[4] = #50000 1'b0;
end 
// input1[ 3 ]
initial
begin
	input1[3] = 1'b0;
	input1[3] = #280000 1'b1;
	input1[3] = #100000 1'b0;
	input1[3] = #50000 1'b1;
	input1[3] = #50000 1'b0;
	input1[3] = #50000 1'b1;
	input1[3] = #100000 1'b0;
end 
// input1[ 2 ]
initial
begin
	input1[2] = 1'b0;
	input1[2] = #80000 1'b1;
	input1[2] = #50000 1'b0;
	input1[2] = #50000 1'b1;
	input1[2] = #50000 1'b0;
	input1[2] = #50000 1'b1;
	input1[2] = #100000 1'b0;
	input1[2] = #150000 1'b1;
	input1[2] = #50000 1'b0;
	input1[2] = #50000 1'b1;
	input1[2] = #70000 1'b0;
end 
// input1[ 1 ]
initial
begin
	input1[1] = 1'b0;
	input1[1] = #80000 1'b1;
	input1[1] = #100000 1'b0;
	input1[1] = #200000 1'b1;
	input1[1] = #50000 1'b0;
	input1[1] = #50000 1'b1;
	input1[1] = #200000 1'b0;
end 
// input1[ 0 ]
initial
begin
	input1[0] = 1'b0;
	input1[0] = #30000 1'b1;
	input1[0] = #50000 1'b0;
	input1[0] = #150000 1'b1;
	input1[0] = #50000 1'b0;
	input1[0] = #50000 1'b1;
	input1[0] = #50000 1'b0;
	input1[0] = #150000 1'b1;
	input1[0] = #100000 1'b0;
	input1[0] = #50000 1'b1;
	input1[0] = #20000 1'b0;
end 
// input2[ 15 ]
initial
begin
	input2[15] = 1'b0;
	input2[15] = #30000 1'b1;
	input2[15] = #150000 1'b0;
	input2[15] = #50000 1'b1;
	input2[15] = #50000 1'b0;
	input2[15] = #50000 1'b1;
	input2[15] = #100000 1'b0;
	input2[15] = #50000 1'b1;
	input2[15] = #50000 1'b0;
	input2[15] = #150000 1'b1;
	input2[15] = #20000 1'b0;
end 
// input2[ 14 ]
initial
begin
	input2[14] = 1'b0;
	input2[14] = #130000 1'b1;
	input2[14] = #50000 1'b0;
	input2[14] = #50000 1'b1;
	input2[14] = #150000 1'b0;
	input2[14] = #50000 1'b1;
	input2[14] = #150000 1'b0;
	input2[14] = #50000 1'b1;
	input2[14] = #70000 1'b0;
end 
// input2[ 13 ]
initial
begin
	input2[13] = 1'b0;
	input2[13] = #80000 1'b1;
	input2[13] = #150000 1'b0;
	input2[13] = #100000 1'b1;
	input2[13] = #50000 1'b0;
	input2[13] = #250000 1'b1;
	input2[13] = #50000 1'b0;
end 
// input2[ 12 ]
initial
begin
	input2[12] = 1'b0;
	input2[12] = #130000 1'b1;
	input2[12] = #50000 1'b0;
	input2[12] = #50000 1'b1;
	input2[12] = #50000 1'b0;
	input2[12] = #350000 1'b1;
	input2[12] = #50000 1'b0;
end 
// input2[ 11 ]
initial
begin
	input2[11] = 1'b0;
	input2[11] = #130000 1'b1;
	input2[11] = #100000 1'b0;
	input2[11] = #50000 1'b1;
	input2[11] = #50000 1'b0;
	input2[11] = #300000 1'b1;
	input2[11] = #50000 1'b0;
end 
// input2[ 10 ]
initial
begin
	input2[10] = 1'b0;
	input2[10] = #30000 1'b1;
	input2[10] = #150000 1'b0;
	input2[10] = #50000 1'b1;
	input2[10] = #200000 1'b0;
	input2[10] = #50000 1'b1;
	input2[10] = #100000 1'b0;
	input2[10] = #50000 1'b1;
	input2[10] = #50000 1'b0;
end 
// input2[ 9 ]
initial
begin
	input2[9] = 1'b0;
	input2[9] = #80000 1'b1;
	input2[9] = #150000 1'b0;
	input2[9] = #150000 1'b1;
	input2[9] = #50000 1'b0;
	input2[9] = #200000 1'b1;
	input2[9] = #70000 1'b0;
end 
// input2[ 8 ]
initial
begin
	input2[8] = 1'b0;
	input2[8] = #30000 1'b1;
	input2[8] = #100000 1'b0;
	input2[8] = #150000 1'b1;
	input2[8] = #150000 1'b0;
	input2[8] = #50000 1'b1;
	input2[8] = #50000 1'b0;
	input2[8] = #50000 1'b1;
	input2[8] = #50000 1'b0;
end 
// input2[ 7 ]
initial
begin
	input2[7] = 1'b0;
	input2[7] = #30000 1'b1;
	input2[7] = #50000 1'b0;
	input2[7] = #100000 1'b1;
	input2[7] = #50000 1'b0;
	input2[7] = #50000 1'b1;
	input2[7] = #100000 1'b0;
	input2[7] = #100000 1'b1;
	input2[7] = #50000 1'b0;
	input2[7] = #50000 1'b1;
	input2[7] = #120000 1'b0;
end 
// input2[ 6 ]
initial
begin
	input2[6] = 1'b0;
	input2[6] = #80000 1'b1;
	input2[6] = #150000 1'b0;
	input2[6] = #100000 1'b1;
	input2[6] = #100000 1'b0;
	input2[6] = #100000 1'b1;
	input2[6] = #50000 1'b0;
	input2[6] = #50000 1'b1;
	input2[6] = #50000 1'b0;
end 
// input2[ 5 ]
initial
begin
	input2[5] = 1'b0;
	input2[5] = #80000 1'b1;
	input2[5] = #100000 1'b0;
	input2[5] = #100000 1'b1;
	input2[5] = #50000 1'b0;
	input2[5] = #50000 1'b1;
	input2[5] = #100000 1'b0;
	input2[5] = #50000 1'b1;
	input2[5] = #170000 1'b0;
end 
// input2[ 4 ]
initial
begin
	input2[4] = 1'b0;
	input2[4] = #30000 1'b1;
	input2[4] = #150000 1'b0;
	input2[4] = #100000 1'b1;
	input2[4] = #50000 1'b0;
	input2[4] = #50000 1'b1;
	input2[4] = #50000 1'b0;
	input2[4] = #50000 1'b1;
	input2[4] = #100000 1'b0;
	input2[4] = #100000 1'b1;
	input2[4] = #20000 1'b0;
end 
// input2[ 3 ]
initial
begin
	input2[3] = 1'b0;
	input2[3] = #380000 1'b1;
	input2[3] = #50000 1'b0;
	input2[3] = #50000 1'b1;
	input2[3] = #100000 1'b0;
end 
// input2[ 2 ]
initial
begin
	input2[2] = 1'b0;
	input2[2] = #130000 1'b1;
	input2[2] = #200000 1'b0;
	input2[2] = #100000 1'b1;
	input2[2] = #100000 1'b0;
end 
// input2[ 1 ]
initial
begin
	input2[1] = 1'b0;
	input2[1] = #380000 1'b1;
	input2[1] = #150000 1'b0;
	input2[1] = #150000 1'b1;
	input2[1] = #20000 1'b0;
end 
// input2[ 0 ]
initial
begin
	input2[0] = 1'b0;
	input2[0] = #30000 1'b1;
	input2[0] = #50000 1'b0;
	input2[0] = #150000 1'b1;
	input2[0] = #100000 1'b0;
	input2[0] = #50000 1'b1;
	input2[0] = #50000 1'b0;
	input2[0] = #50000 1'b1;
	input2[0] = #50000 1'b0;
	input2[0] = #50000 1'b1;
	input2[0] = #50000 1'b0;
	input2[0] = #50000 1'b1;
	input2[0] = #20000 1'b0;
end 
// input3[ 15 ]
initial
begin
	input3[15] = 1'b0;
	input3[15] = #80000 1'b1;
	input3[15] = #100000 1'b0;
	input3[15] = #50000 1'b1;
	input3[15] = #200000 1'b0;
	input3[15] = #150000 1'b1;
	input3[15] = #120000 1'b0;
end 
// input3[ 14 ]
initial
begin
	input3[14] = 1'b0;
	input3[14] = #30000 1'b1;
	input3[14] = #250000 1'b0;
	input3[14] = #50000 1'b1;
	input3[14] = #50000 1'b0;
	input3[14] = #100000 1'b1;
	input3[14] = #150000 1'b0;
	input3[14] = #50000 1'b1;
	input3[14] = #20000 1'b0;
end 
// input3[ 13 ]
initial
begin
	input3[13] = 1'b0;
	input3[13] = #330000 1'b1;
	input3[13] = #50000 1'b0;
	input3[13] = #300000 1'b1;
	input3[13] = #20000 1'b0;
end 
// input3[ 12 ]
initial
begin
	input3[12] = 1'b0;
	input3[12] = #30000 1'b1;
	input3[12] = #50000 1'b0;
	input3[12] = #100000 1'b1;
	input3[12] = #50000 1'b0;
	input3[12] = #100000 1'b1;
	input3[12] = #100000 1'b0;
	input3[12] = #50000 1'b1;
	input3[12] = #100000 1'b0;
	input3[12] = #50000 1'b1;
	input3[12] = #70000 1'b0;
end 
// input3[ 11 ]
initial
begin
	input3[11] = 1'b0;
	input3[11] = #130000 1'b1;
	input3[11] = #150000 1'b0;
	input3[11] = #50000 1'b1;
	input3[11] = #50000 1'b0;
	input3[11] = #100000 1'b1;
	input3[11] = #50000 1'b0;
	input3[11] = #100000 1'b1;
	input3[11] = #70000 1'b0;
end 
// input3[ 10 ]
initial
begin
	input3[10] = 1'b0;
	input3[10] = #30000 1'b1;
	input3[10] = #150000 1'b0;
	input3[10] = #100000 1'b1;
	input3[10] = #150000 1'b0;
	input3[10] = #50000 1'b1;
	input3[10] = #50000 1'b0;
	input3[10] = #50000 1'b1;
	input3[10] = #50000 1'b0;
	input3[10] = #50000 1'b1;
	input3[10] = #20000 1'b0;
end 
// input3[ 9 ]
initial
begin
	input3[9] = 1'b0;
	input3[9] = #30000 1'b1;
	input3[9] = #50000 1'b0;
	input3[9] = #50000 1'b1;
	input3[9] = #50000 1'b0;
	input3[9] = #50000 1'b1;
	input3[9] = #50000 1'b0;
	input3[9] = #50000 1'b1;
	input3[9] = #200000 1'b0;
	input3[9] = #50000 1'b1;
	input3[9] = #100000 1'b0;
end 
// input3[ 8 ]
initial
begin
	input3[8] = 1'b0;
	input3[8] = #80000 1'b1;
	input3[8] = #50000 1'b0;
	input3[8] = #50000 1'b1;
	input3[8] = #150000 1'b0;
	input3[8] = #100000 1'b1;
	input3[8] = #200000 1'b0;
end 
// input3[ 7 ]
initial
begin
	input3[7] = 1'b0;
	input3[7] = #80000 1'b1;
	input3[7] = #100000 1'b0;
	input3[7] = #50000 1'b1;
	input3[7] = #50000 1'b0;
	input3[7] = #50000 1'b1;
	input3[7] = #100000 1'b0;
	input3[7] = #100000 1'b1;
	input3[7] = #50000 1'b0;
	input3[7] = #50000 1'b1;
	input3[7] = #70000 1'b0;
end 
// input3[ 6 ]
initial
begin
	input3[6] = 1'b0;
	input3[6] = #30000 1'b1;
	input3[6] = #50000 1'b0;
	input3[6] = #50000 1'b1;
	input3[6] = #200000 1'b0;
	input3[6] = #100000 1'b1;
	input3[6] = #50000 1'b0;
	input3[6] = #50000 1'b1;
	input3[6] = #50000 1'b0;
end 
// input3[ 5 ]
initial
begin
	input3[5] = 1'b0;
	input3[5] = #30000 1'b1;
	input3[5] = #300000 1'b0;
	input3[5] = #50000 1'b1;
	input3[5] = #50000 1'b0;
	input3[5] = #150000 1'b1;
	input3[5] = #50000 1'b0;
end 
// input3[ 4 ]
initial
begin
	input3[4] = 1'b0;
	input3[4] = #30000 1'b1;
	input3[4] = #150000 1'b0;
	input3[4] = #50000 1'b1;
	input3[4] = #50000 1'b0;
	input3[4] = #200000 1'b1;
	input3[4] = #100000 1'b0;
end 
// input3[ 3 ]
initial
begin
	input3[3] = 1'b0;
	input3[3] = #230000 1'b1;
	input3[3] = #50000 1'b0;
	input3[3] = #150000 1'b1;
	input3[3] = #100000 1'b0;
	input3[3] = #100000 1'b1;
	input3[3] = #70000 1'b0;
end 
// input3[ 2 ]
initial
begin
	input3[2] = 1'b0;
	input3[2] = #130000 1'b1;
	input3[2] = #50000 1'b0;
	input3[2] = #250000 1'b1;
	input3[2] = #150000 1'b0;
	input3[2] = #50000 1'b1;
	input3[2] = #50000 1'b0;
end 
// input3[ 1 ]
initial
begin
	input3[1] = 1'b0;
	input3[1] = #30000 1'b1;
	input3[1] = #50000 1'b0;
	input3[1] = #50000 1'b1;
	input3[1] = #50000 1'b0;
	input3[1] = #100000 1'b1;
	input3[1] = #50000 1'b0;
	input3[1] = #50000 1'b1;
	input3[1] = #50000 1'b0;
	input3[1] = #100000 1'b1;
	input3[1] = #100000 1'b0;
end 
// input3[ 0 ]
initial
begin
	input3[0] = 1'b0;
	input3[0] = #180000 1'b1;
	input3[0] = #50000 1'b0;
	input3[0] = #250000 1'b1;
	input3[0] = #50000 1'b0;
end 
// sel[ 1 ]
initial
begin
	sel[1] = 1'b0;
	sel[1] = #30000 1'b1;
	sel[1] = #250000 1'b0;
	sel[1] = #50000 1'b1;
	sel[1] = #50000 1'b0;
	sel[1] = #50000 1'b1;
	sel[1] = #50000 1'b0;
	sel[1] = #50000 1'b1;
	sel[1] = #50000 1'b0;
	sel[1] = #100000 1'b1;
	sel[1] = #20000 1'b0;
end 
// sel[ 0 ]
initial
begin
	sel[0] = 1'b0;
	sel[0] = #30000 1'b1;
	sel[0] = #50000 1'b0;
	sel[0] = #150000 1'b1;
	sel[0] = #50000 1'b0;
	sel[0] = #150000 1'b1;
	sel[0] = #100000 1'b0;
	sel[0] = #50000 1'b1;
	sel[0] = #100000 1'b0;
end 

mux4to1_16bit_vlg_sample_tst tb_sample (
	.input0(input0),
	.input1(input1),
	.input2(input2),
	.input3(input3),
	.sel(sel),
	.sampler_tx(sampler)
);

mux4to1_16bit_vlg_check_tst tb_out(
	.res(res),
	.sampler_rx(sampler)
);
endmodule

