// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/11/2024 18:01:55"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    register_8bit
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module register_8bit_vlg_sample_tst(
	clear_not,
	clock,
	en,
	p_in,
	p_load,
	pri_not,
	s_in,
	sampler_tx
);
input  clear_not;
input  clock;
input  en;
input [7:0] p_in;
input  p_load;
input  pri_not;
input  s_in;
output sampler_tx;

reg sample;
time current_time;
always @(clear_not or clock or en or p_in or p_load or pri_not or s_in)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module register_8bit_vlg_check_tst (
	p_out,
	s_out,
	sampler_rx
);
input [7:0] p_out;
input  s_out;
input sampler_rx;

reg [7:0] p_out_expected;
reg  s_out_expected;

reg [7:0] p_out_prev;
reg  s_out_prev;

reg [7:0] p_out_expected_prev;
reg  s_out_expected_prev;

reg [7:0] last_p_out_exp;
reg  last_s_out_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	p_out_prev = p_out;
	s_out_prev = s_out;
end

// update expected /o prevs

always @(trigger)
begin
	p_out_expected_prev = p_out_expected;
	s_out_expected_prev = s_out_expected;
end


// expected p_out[ 7 ]
initial
begin
	p_out_expected[7] = 1'bX;
end 
// expected p_out[ 6 ]
initial
begin
	p_out_expected[6] = 1'bX;
end 
// expected p_out[ 5 ]
initial
begin
	p_out_expected[5] = 1'bX;
end 
// expected p_out[ 4 ]
initial
begin
	p_out_expected[4] = 1'bX;
end 
// expected p_out[ 3 ]
initial
begin
	p_out_expected[3] = 1'bX;
end 
// expected p_out[ 2 ]
initial
begin
	p_out_expected[2] = 1'bX;
end 
// expected p_out[ 1 ]
initial
begin
	p_out_expected[1] = 1'bX;
end 
// expected p_out[ 0 ]
initial
begin
	p_out_expected[0] = 1'bX;
end 

// expected s_out
initial
begin
	s_out_expected = 1'bX;
end 
// generate trigger
always @(p_out_expected or p_out or s_out_expected or s_out)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected p_out = %b | expected s_out = %b | ",p_out_expected_prev,s_out_expected_prev);
	$display("| real p_out = %b | real s_out = %b | ",p_out_prev,s_out_prev);
`endif
	if (
		( p_out_expected_prev[0] !== 1'bx ) && ( p_out_prev[0] !== p_out_expected_prev[0] )
		&& ((p_out_expected_prev[0] !== last_p_out_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port p_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", p_out_expected_prev);
		$display ("     Real value = %b", p_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_p_out_exp[0] = p_out_expected_prev[0];
	end
	if (
		( p_out_expected_prev[1] !== 1'bx ) && ( p_out_prev[1] !== p_out_expected_prev[1] )
		&& ((p_out_expected_prev[1] !== last_p_out_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port p_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", p_out_expected_prev);
		$display ("     Real value = %b", p_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_p_out_exp[1] = p_out_expected_prev[1];
	end
	if (
		( p_out_expected_prev[2] !== 1'bx ) && ( p_out_prev[2] !== p_out_expected_prev[2] )
		&& ((p_out_expected_prev[2] !== last_p_out_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port p_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", p_out_expected_prev);
		$display ("     Real value = %b", p_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_p_out_exp[2] = p_out_expected_prev[2];
	end
	if (
		( p_out_expected_prev[3] !== 1'bx ) && ( p_out_prev[3] !== p_out_expected_prev[3] )
		&& ((p_out_expected_prev[3] !== last_p_out_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port p_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", p_out_expected_prev);
		$display ("     Real value = %b", p_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_p_out_exp[3] = p_out_expected_prev[3];
	end
	if (
		( p_out_expected_prev[4] !== 1'bx ) && ( p_out_prev[4] !== p_out_expected_prev[4] )
		&& ((p_out_expected_prev[4] !== last_p_out_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port p_out[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", p_out_expected_prev);
		$display ("     Real value = %b", p_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_p_out_exp[4] = p_out_expected_prev[4];
	end
	if (
		( p_out_expected_prev[5] !== 1'bx ) && ( p_out_prev[5] !== p_out_expected_prev[5] )
		&& ((p_out_expected_prev[5] !== last_p_out_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port p_out[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", p_out_expected_prev);
		$display ("     Real value = %b", p_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_p_out_exp[5] = p_out_expected_prev[5];
	end
	if (
		( p_out_expected_prev[6] !== 1'bx ) && ( p_out_prev[6] !== p_out_expected_prev[6] )
		&& ((p_out_expected_prev[6] !== last_p_out_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port p_out[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", p_out_expected_prev);
		$display ("     Real value = %b", p_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_p_out_exp[6] = p_out_expected_prev[6];
	end
	if (
		( p_out_expected_prev[7] !== 1'bx ) && ( p_out_prev[7] !== p_out_expected_prev[7] )
		&& ((p_out_expected_prev[7] !== last_p_out_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port p_out[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", p_out_expected_prev);
		$display ("     Real value = %b", p_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_p_out_exp[7] = p_out_expected_prev[7];
	end
	if (
		( s_out_expected_prev !== 1'bx ) && ( s_out_prev !== s_out_expected_prev )
		&& ((s_out_expected_prev !== last_s_out_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_out :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_out_expected_prev);
		$display ("     Real value = %b", s_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_s_out_exp = s_out_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module register_8bit_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clear_not;
reg clock;
reg en;
reg [7:0] p_in;
reg p_load;
reg pri_not;
reg s_in;
// wires                                               
wire [7:0] p_out;
wire s_out;

wire sampler;                             

// assign statements (if any)                          
register_8bit i1 (
// port map - connection between master ports and signals/registers   
	.clear_not(clear_not),
	.clock(clock),
	.en(en),
	.p_in(p_in),
	.p_load(p_load),
	.p_out(p_out),
	.pri_not(pri_not),
	.s_in(s_in),
	.s_out(s_out)
);

// clear_not
initial
begin
	clear_not = 1'b0;
	clear_not = #10000 1'b1;
end 

// clock
always
begin
	clock = 1'b0;
	clock = #10000 1'b1;
	#10000;
end 

// en
initial
begin
	en = 1'b1;
end 
// p_in[ 7 ]
initial
begin
	p_in[7] = 1'b0;
	p_in[7] = #50000 1'b1;
	p_in[7] = #100000 1'b0;
	p_in[7] = #50000 1'b1;
	p_in[7] = #50000 1'b0;
	p_in[7] = #50000 1'b1;
	p_in[7] = #100000 1'b0;
	p_in[7] = #100000 1'b1;
	p_in[7] = #150000 1'b0;
	p_in[7] = #50000 1'b1;
	p_in[7] = #50000 1'b0;
	p_in[7] = #100000 1'b1;
	p_in[7] = #50000 1'b0;
	p_in[7] = #50000 1'b1;
end 
// p_in[ 6 ]
initial
begin
	p_in[6] = 1'b0;
	p_in[6] = #100000 1'b1;
	p_in[6] = #100000 1'b0;
	p_in[6] = #100000 1'b1;
	p_in[6] = #50000 1'b0;
	p_in[6] = #50000 1'b1;
	p_in[6] = #50000 1'b0;
	p_in[6] = #100000 1'b1;
	p_in[6] = #50000 1'b0;
	p_in[6] = #100000 1'b1;
	p_in[6] = #50000 1'b0;
	p_in[6] = #200000 1'b1;
end 
// p_in[ 5 ]
initial
begin
	p_in[5] = 1'b0;
	p_in[5] = #50000 1'b1;
	p_in[5] = #50000 1'b0;
	p_in[5] = #50000 1'b1;
	p_in[5] = #50000 1'b0;
	p_in[5] = #100000 1'b1;
	p_in[5] = #100000 1'b0;
	p_in[5] = #50000 1'b1;
	p_in[5] = #150000 1'b0;
	p_in[5] = #100000 1'b1;
	p_in[5] = #50000 1'b0;
	p_in[5] = #50000 1'b1;
	p_in[5] = #100000 1'b0;
	p_in[5] = #50000 1'b1;
end 
// p_in[ 4 ]
initial
begin
	p_in[4] = 1'b1;
	p_in[4] = #50000 1'b0;
	p_in[4] = #250000 1'b1;
	p_in[4] = #50000 1'b0;
	p_in[4] = #50000 1'b1;
	p_in[4] = #150000 1'b0;
	p_in[4] = #100000 1'b1;
	p_in[4] = #250000 1'b0;
end 
// p_in[ 3 ]
initial
begin
	p_in[3] = 1'b0;
	p_in[3] = #150000 1'b1;
	p_in[3] = #50000 1'b0;
	p_in[3] = #50000 1'b1;
	p_in[3] = #50000 1'b0;
	p_in[3] = #100000 1'b1;
	p_in[3] = #50000 1'b0;
	p_in[3] = #50000 1'b1;
	p_in[3] = #100000 1'b0;
	p_in[3] = #50000 1'b1;
	p_in[3] = #50000 1'b0;
	p_in[3] = #50000 1'b1;
	p_in[3] = #50000 1'b0;
	p_in[3] = #100000 1'b1;
	p_in[3] = #50000 1'b0;
end 
// p_in[ 2 ]
initial
begin
	p_in[2] = 1'b1;
	p_in[2] = #100000 1'b0;
	p_in[2] = #100000 1'b1;
	p_in[2] = #250000 1'b0;
	p_in[2] = #100000 1'b1;
	p_in[2] = #50000 1'b0;
	p_in[2] = #250000 1'b1;
end 
// p_in[ 1 ]
initial
begin
	p_in[1] = 1'b0;
	p_in[1] = #50000 1'b1;
	p_in[1] = #100000 1'b0;
	p_in[1] = #50000 1'b1;
	p_in[1] = #150000 1'b0;
	p_in[1] = #50000 1'b1;
	p_in[1] = #50000 1'b0;
	p_in[1] = #200000 1'b1;
	p_in[1] = #50000 1'b0;
	p_in[1] = #200000 1'b1;
end 
// p_in[ 0 ]
initial
begin
	p_in[0] = 1'b0;
	p_in[0] = #200000 1'b1;
	p_in[0] = #50000 1'b0;
	p_in[0] = #100000 1'b1;
	p_in[0] = #50000 1'b0;
	p_in[0] = #250000 1'b1;
	p_in[0] = #100000 1'b0;
	p_in[0] = #50000 1'b1;
	p_in[0] = #100000 1'b0;
	p_in[0] = #50000 1'b1;
end 

// p_load
initial
begin
	p_load = 1'b0;
	p_load = #100000 1'b1;
	p_load = #150000 1'b0;
	p_load = #100000 1'b1;
	p_load = #100000 1'b0;
	p_load = #100000 1'b1;
	p_load = #50000 1'b0;
	p_load = #50000 1'b1;
	p_load = #50000 1'b0;
end 

// pri_not
initial
begin
	pri_not = 1'b1;
end 

// s_in
initial
begin
	s_in = 1'b0;
	s_in = #50000 1'b1;
	s_in = #50000 1'b0;
	s_in = #50000 1'b1;
	s_in = #50000 1'b0;
	s_in = #50000 1'b1;
	s_in = #50000 1'b0;
	s_in = #50000 1'b1;
	s_in = #50000 1'b0;
	s_in = #50000 1'b1;
	s_in = #50000 1'b0;
	s_in = #50000 1'b1;
	s_in = #300000 1'b0;
	s_in = #50000 1'b1;
	s_in = #50000 1'b0;
end 

register_8bit_vlg_sample_tst tb_sample (
	.clear_not(clear_not),
	.clock(clock),
	.en(en),
	.p_in(p_in),
	.p_load(p_load),
	.pri_not(pri_not),
	.s_in(s_in),
	.sampler_tx(sampler)
);

register_8bit_vlg_check_tst tb_out(
	.p_out(p_out),
	.s_out(s_out),
	.sampler_rx(sampler)
);
endmodule

