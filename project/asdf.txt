import subprocessimport pandas as pdimport matplotlib.pyplot as pltimport osdef run_gem5_simulation(program, policy, results):    command = [        "./build/X86/gem5.opt",        "configs/deprecated/example/se.py",        "-c", f"binary/{program}",        "--caches",        "--l2cache",        "--l2_size=4kB",        "--mem-type=DDR4_2400_16x4",        "--cacheline_size", "64",        f"--l2_repl={policy}"    ]    try:        subprocess.check_output(command, universal_newlines=True)        performance = extract_performance_metric('m5out/stats.txt')        if performance is not None:            results.append((program, policy, performance))    except subprocess.CalledProcessError as e:        print(f"Error running {program} with policy {policy}: {e}")def extract_performance_metric(stats_file):    try:        with open(stats_file, 'r') as f:            for line in f:                if 'l2.overallMissRate::cpu.data' in line:                    return float(line.split()[1])    except Exception as e:        print(f"Error reading {stats_file}: {e}")    return Nonedef run_simulations(programs, policies):    results = []    for program in programs:        for policy in policies:            run_gem5_simulation(program, policy, results)    return resultsdef generate_results_csv_and_plots(results, filename):    df = pd.DataFrame(results, columns=['Program', 'Policy', 'Performance'])    df = df.dropna(subset=['Performance'])    df.to_csv(filename, index=False)    for program in df['Program'].unique():        plt.figure()        subset = df[df['Program'] == program]        plt.bar(subset['Policy'], subset['Performance'])        plt.xlabel('Policy')        plt.ylabel('Performance')        plt.title(f'Performance of {program} with different policies')        plt.savefig(f'{program}_performance.png')# programs = [f'bench{i}' for i in range(1, 11)]programs = ['bench1']# policies = ['Belady', 'LRU', 'FIFO', 'LFU', 'RANDOM']policies = ['LRURP', 'FIFORP', 'RandomRP']results = run_simulations(programs, policies)print(results)generate_results_csv_and_plots(results, 'simulation_results.csv')